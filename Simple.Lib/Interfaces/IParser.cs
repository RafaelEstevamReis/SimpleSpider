using System;

namespace Net.RafaelEstevam.Spider.Interfaces
{
    /// <summary>
    /// Represents a method that passes parsed data
    /// </summary>
    /// <typeparam name="T">Type of data to be parsed</typeparam>
    /// <param name="sender">The source of the event</param>
    /// <param name="parserEventArgs">Object containing parsed data</param>
    public delegate void ParseData<T>(object sender, ParserEventArgs<T> parserEventArgs);
    /// <summary>
    /// Base Interface to construct IParser`T` from
    /// </summary>
    public interface IParserBase
    {
        /// <summary>
        /// A list of MimeTypes/Content-type this parser can process
        /// </summary>
        string[] MimeTypes { get; }
        /// <summary>
        /// Method to initiate the parsing process
        /// </summary>
        /// <param name="spider">Spider object</param>
        /// <param name="fetchInfo">Fetched data to parse from</param>
        internal void Parse(SimpleSpider spider, FetchCompleteEventArgs fetchInfo);
    }
    /// <summary>
    /// Interface to create custom parsers from
    /// </summary>
    /// <typeparam name="T">The type of the data processed</typeparam>
    public interface IParser<T> : IParserBase
    {
        /// <summary>
        /// Event to propagate parsed data
        /// </summary>
        event ParseData<T> ParsedData;
    }
    /// <summary>
    /// Arguments to the Parser Event
    /// </summary>
    /// <typeparam name="T">The type of the event data generated by the event</typeparam>
    public class ParserEventArgs<T> : EventArgs
    {
        public ParserEventArgs(FetchCompleteEventArgs FetchInfo, T Data)
        {
            this.FetchInfo = FetchInfo;
            this.ParsedData = Data;
        }
        /// <summary>
        /// Original FetchCompleteEventArgs received by the parser
        /// </summary>
        public FetchCompleteEventArgs FetchInfo { get; }
        /// <summary>
        /// Dataparsed by the parser
        /// </summary>
        public T ParsedData { get; }
    }
}
