<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.Lib</name>
    </assembly>
    <members>
        <member name="T:Net.RafaelEstevam.Spider.Cachers.ContentCacher">
            <summary>
            Simple cacher, stores the content of the resource fetched locally
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Cachers.NullCacher">
            <summary>
            Empty cacher, discards all cache requests
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Configuration">
            <summary>
            Class to hold the configuration for the spider
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.SpiderDirectory">
            <summary>
            Spider main directory
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.SpiderDataDirectory">
            <summary>
            Spider data directory
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Spider_LogFile">
            <summary>
            Spider log file
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Logger">
            <summary>
            Standard log
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Auto_RewriteRemoveFragment">
            <summary>
            Enable auto rewrite of Uri to remove Frament
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Cache_Enable">
            <summary>
            Are caching enabled? ICacher must support
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Enable_Caching">
            <summary>
            Enables Caching using Cache_Enable property
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Disable_Caching">
            <summary>
            Disables Caching using Cache_Enable property
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Cache_Lifetime">
            <summary>
            How long cache files are valid?  ICacher must support
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Set_CachingTTL(System.TimeSpan)">
            <summary>
            Sets cache limit
            </summary>
            <param name="timeSpan">Max age of the cache resource</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Set_CachingNoLimit">
            <summary>
            Sets cache limit to Infinity (no limit), using Cache_Lifetimeproperty set to null
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.DownloadDelay">
            <summary>
            Time to wait in milliseconds between downloads
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Set_DownloadDelay(System.TimeSpan)">
            <summary>
            Sets Downloader delay using DownloadDelay property
            </summary>
            <param name="Delay">Delay value</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Set_DownloadDelay(System.Int32)">
            <summary>
            Sets Downloader delay in milliseconds using DownloadDelay property
            </summary>
            <param name="Delay">Value in milliseconds</param>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Cookies_Enable">
            <summary>
            Are cookies enabled? IDownloader must support
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Enable_Cookies">
            <summary>
            Enables downloader to use Cookies, if supported. Uses Cookies_Enable property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Disable_Cookies">
            <summary>
            Disables downloader from using Cookies, if supported. Uses Cookies_Enable property
            </summary>
            <returns></returns>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Paused">
            <summary>
            Inform all components to temporarily pause
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Paused_Cacher">
            <summary>
            Inform cacher to temporarily pause
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Paused_Downloader">
            <summary>
            Inform downloader to temporarily pause
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Configuration.Auto_AnchorsLinks">
            <summary>
            Enable auto collection of html Anchors tags
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Enable_AutoAnchorsLinks">
            <summary>
            Enable auto collection of html Anchors tags, uses Auto_AnchorsLinks property
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Configuration.Disable_AutoAnchorsLinks">
            <summary>
            Disable auto collection of html Anchors tags, uses Auto_AnchorsLinks property
            </summary>
            <returns></returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchComplete">
            <summary>
            Represents a method that passes fetch completed data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object containing fetch data</param>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchFail">
            <summary>
            Represents a method that passes fetch failed data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object containing fetch failed info</param>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchRewrite">
            <summary>
            Represents a method that passes fetch rewrite data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object allowing changing the Uri</param>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.ShouldFetch">
            <summary>
             Represents a method that checks if should fetch data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object allowing cancel the fetching process</param>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchEventArgs">
            <summary>
            Arguments to de Fetch event
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchEventArgs.EventSource">
            <summary>
            Module that fired the event
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.FetchEventArgs.EventSource.Cacher">
            <summary>
            Event initiated by the Cacher
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.FetchEventArgs.EventSource.Downloader">
            <summary>
            Event initiated by the Downloader
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.FetchEventArgs.EventSource.Scheduler">
            <summary>
            Event initiated by the Scheduler
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchEventArgs.RequestHeaders">
            <summary>
            The request headers used to query
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchEventArgs.Link">
            <summary>
            Link from where the resource was fetched
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchEventArgs.Source">
            <summary>
            Source from this event
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchCompleteEventArgs">
            <summary>
            Arguments to de FetchComplete event
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchCompleteEventArgs.Result">
            <summary>
            Byte array with the data fetched
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchCompleteEventArgs.ResponseHeaders">
            <summary>
            The response headers returned 
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchCompleteEventArgs.Html">
            <summary>
            LazyLoaded Html (string) content parsed from  byte[] Result encoded with UTF8
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.FetchCompleteEventArgs.GetXElement">
            <summary>
            Get the XElement representation of the Html property
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.FetchCompleteEventArgs.GetHObject">
            <summary>
            Get the HObject representation of the Html property
            </summary>
            <returns>A HObject</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.FetchCompleteEventArgs.HtmlContent(System.Text.Encoding)">
            <summary>
            Parses  byte[] Result using and specific Encoding. The 'Html' property will be updated with this value
            </summary>
            <param name="enc">Encoding to be used</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.FetchCompleteEventArgs.#ctor(Net.RafaelEstevam.Spider.Link,System.Byte[],Net.RafaelEstevam.Spider.HeaderCollection,Net.RafaelEstevam.Spider.HeaderCollection)">
            <summary>
            Constructs a new FetchCompleteEventArgs
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchFailEventArgs">
            <summary>
            Arguments to de FetchFail event
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchFailEventArgs.Error">
            <summary>
            Error raised during fetch
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchFailEventArgs.HttpErrorCode">
            <summary>
            HTTP error code
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.FetchFailEventArgs.#ctor(Net.RafaelEstevam.Spider.Link,System.Exception,Net.RafaelEstevam.Spider.HeaderCollection)">
            <summary>
            Constructs a FetchFailEventArgs
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.FetchFailEventArgs.#ctor(Net.RafaelEstevam.Spider.Link,System.Int32,System.Exception,Net.RafaelEstevam.Spider.HeaderCollection)">
            <summary>
            Constructs a FetchFailEventArgs
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.ShouldFetchEventArgs">
            <summary>
            Arguments to de ShouldFetch event
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Reasons">
            <summary>
            Reason to not fetch some resource
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Reasons.AlreadyFetched">
            <summary>
            This resource was already fetched
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Reasons.UserCancelled">
            <summary>
            User cancelled the process
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Reasons.UserCancelledSilent">
            <summary>
            User cancelled the process, ignore on Log
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Reasons.PreviousError">
            <summary>
            This resource caused an error on previous session
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Reasons.None">
            <summary>
            There is no specific reason
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Cancel">
            <summary>
            Instruct the spider to NOT fetch this resource
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.Reason">
            <summary>
            Informs reason to do not fetch
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.ShouldFetchEventArgs.#ctor(Net.RafaelEstevam.Spider.Link)">
            <summary>
            Creates a new ShouldFetchEventArgs
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.FetchRewriteEventArgs">
            <summary>
            Arguments to de FetchRewrite event
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.FetchRewriteEventArgs.#ctor(System.Uri)">
            <summary>
            Construct a FetchRewriteEventArgs
            </summary>
            <param name="CurrentUri"></param>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchRewriteEventArgs.CurrentUri">
            <summary>
            The original Uri added to the queue
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchRewriteEventArgs.NewUri">
            <summary>
            New Uri to be fetched
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.FetchRewriteEventArgs.ShowOnLog">
            <summary>
            Defines if should log the rewrite operation
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Downloaders.HttpClientDownloader">
            <summary>
            Simple Downloader using System.Net.Http.HttpClient
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Downloaders.NullDownloader">
            <summary>
            Empty downloader, discards all download requests
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Downloaders.WebClientDownloader">
            <summary>
            Simple Downloader using WebClient
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Downloaders.WebClientDownloader.CustomWebClient">
            <summary>
            Internal WebClient overload to expose protected stuff
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Downloaders.WebClientDownloader.CustomWebClient.LastRequest">
            <summary>
            Last request used
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Downloaders.WebClientDownloader.CustomWebClient.EnableCookies">
            <summary>
            Defines if next request should use cookies
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Downloaders.WebClientDownloader.CustomWebClient.CookieContainer">
            <summary>
            Current cookie container
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Downloaders.WebClientDownloader.CustomWebClient.GetWebRequest(System.Uri)">
            <summary>
            Return the WebRequest for this WebClient
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Extensions.XElementExtensions">
            <summary>
            Obsolete, use Net.RafaelEstevam.Spider.Helper.XElementHelper instead
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Extensions.XElementExtensions.GetAllTablesX(System.Xml.Linq.XElement)">
            <summary>
            Obsolete, use Net.RafaelEstevam.Spider.Helper.XElementHelper instead
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Extensions.XElementExtensions.GetAllTables(System.Xml.Linq.XElement)">
            <summary>
            Obsolete, use Net.RafaelEstevam.Spider.Helper.XElementHelper instead
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Extensions.XElementExtensions.GetDataTable(System.Xml.Linq.XElement)">
            <summary>
            Obsolete, use Net.RafaelEstevam.Spider.Helper.XElementHelper instead
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Files">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Files.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Files.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Files.README">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.HeaderCollection">
            <summary>
            Class to hold HTTP Header data
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.HeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates a new object with specified parameter
            </summary>
            <param name="kvp">Enumerable of KeyValuePairs</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.HeaderCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new object with specified parameter
            </summary>
            <param name="nvc">A NameValueCollection to initialize from</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.HeaderCollection.#ctor">
            <summary>
            Creates a new empty object
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.HeaderCollection.Item(System.String)">
            <summary>
            Access values with given Key
            </summary>
            <param name="Key">Key to search for</param>
            <returns>Value if found or NULL if key was not present</returns>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.HeaderCollection.AllKeys">
            <summary>
            Gets all keys
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.HeaderCollection.Pairs">
            <summary>
            Gets or sets all pairs as SerializableKeyValuePair, used by XmlSerialization
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.HeaderCollection.GetEnumerator">
            <summary>
            Enumerates through all pairs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.HeaderCollection.ToString">
            <summary>
            Fancy exhibition on debug
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.SerializableKeyValuePair">
            <summary>
            Represents a Serializable KeyValuePair
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SerializableKeyValuePair.Key">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SerializableKeyValuePair.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SerializableKeyValuePair.op_Implicit(Net.RafaelEstevam.Spider.SerializableKeyValuePair)~System.Collections.Generic.KeyValuePair{System.String,System.String}">
            <summary>
            Implicit conversion to KeyValuePair&lt;string, string&gt;
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SerializableKeyValuePair.op_Implicit(System.Collections.Generic.KeyValuePair{System.String,System.String})~Net.RafaelEstevam.Spider.SerializableKeyValuePair">
            <summary>
            Implicit conversion from KeyValuePair&lt;string, string&gt;
            </summary>
            <param name="pair"></param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SerializableKeyValuePair.ToString">
            <summary>
            Fancy exhibition on debug
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.AnchorHelper">
            <summary>
            Helper to do stuff with html {a} tags 
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.AnchorHelper.GetAnchors(System.Uri,System.String)">
            <summary>
            Simple Substring based 'a' tag enumerator
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.AnchorHelper.GetAnchors(System.Uri,System.Xml.Linq.XElement)">
            <summary>
            Get all anchors ('a' tag) and convert to an Uri collection
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.ConversionHelper">
            <summary>
            Helper to convert stuff frequently found on websites or API responses
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.ConversionHelper.UnixEpoch(System.Int64)">
            <summary>
            Converts Unix Epoch from number to Datetime
            </summary>
            <param name="Timestamp">Numeric representation of Unix time</param>
            <returns>Datetime converted</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.ConversionHelper.UnixEpoch(System.DateTime)">
            <summary>
            Converts Unix Epoch from Datetime to number
            </summary>
            <param name="dateTime">Datetime component to be converted</param>
            <returns>>Numeric representation of Unix time</returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.CSVHelper">
            <summary>
            Helper to do stuff with CSV data
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.CSVHelper.CSVSplit(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Split CSV lines using semicolon (rfc4180 standard)
            </summary>
            <param name="Lines">Lines to be splitted</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.CSVHelper.DelimiterSplit(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Split CSV lines using specified demlimter
            </summary>
            <param name="Lines">Lines to be splitted</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.CSVHelper.FileSplit(System.IO.FileInfo,System.Text.Encoding,System.Char)">
            <summary>
            Splits a CSV file even if its compressed as .gz or .zip
            </summary>
            <param name="fi">File to be read</param>
            <param name="encoding">Specify which encoding should be used</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.CSVHelper.FileSplit(System.IO.StreamReader,System.Char)">
            <summary>
            Splits lines from a stream
            </summary>
            <param name="streamReader">Stream to get lines from</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.FetchHelper">
            <summary>
            Helper to fetch stuff
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResource(System.Uri)">
            <summary>
            Fetch resource from uri
            </summary>
            <param name="uri">Uri to fetch from</param>
            <returns>Byte aray with data fetched</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResourceText(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>String with data fetched</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResourceXElement(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a XElement from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>XElement with data fetched</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResourceHObject(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a HObject from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>HObject with data fetched</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResourceJObject(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a JObject from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>JObject with data fetched</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResourceJObject(System.Uri,Newtonsoft.Json.Linq.JsonLoadSettings,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a JObject from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="loadSettings">JsonLoadSettings to parse with</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>JObject with data fetched</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResourceJson``1(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and deserialize T from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>T deserialized with data fetched</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FetchHelper.FetchResourceJson``1(System.Uri,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and deserialize T from it
            </summary>
            <param name="uri">Uri to fetch from></param>
            <param name="enc">Defines which encoding should be used</param>
            <param name="settings">JsonSerializerSettings Settings</param>
            <returns>>T deserialized with data fetched</returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.FormsHelper">
            <summary>
            Helper to do stuff with html Form tags 
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FormsHelper.GetForms(System.Xml.Linq.XElement)">
            <summary>
            Enumarate all forms
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FormsHelper.GetFormTag(System.Xml.Linq.XElement)">
            <summary>
            Construct a FormTag from a Form XElement
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.FormTag">
            <summary>
            Class to represent a HtmlForm to easy Linq operations
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.FormTag.Methods">
            <summary>
            Represents the method attibute options
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.Helper.FormTag.Methods.Get">
            <summary>
            Http GET method
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.Helper.FormTag.Methods.Post">
            <summary>
            Http POST method
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Element">
            <summary>
            Original XElement parsed
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Id">
            <summary>
            Represents the Id attibute of the form
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Name">
            <summary>
            Represents the Name attibute of the form
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Action">
            <summary>
            Represents the Action attibute of the form
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Class">
            <summary>
            Represents the Class attibute of the form
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Classes">
            <summary>
            Classes splitted by a Space
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Method">
            <summary>
            Represents the method attibute of the form
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Inputs">
            <summary>
            All inputs elements parsed as InputTag
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Buttons">
            <summary>
            All buttons XElement
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.FormTag.Hiddens">
            <summary>
            Collection of the Hidden fields
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.FormTag.ToString">
            <summary>
            String representation of the object
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.InputTag">
            <summary>
            Class to represent a InputTag
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.InputTag.Id">
            <summary>
            Represents the Id attibute
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.InputTag.Type">
            <summary>
            Represents the Type attibute
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.InputTag.Name">
            <summary>
            Represents the Name attibute
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.InputTag.Value">
            <summary>
            Represents the Value attibute
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Helper.InputTag.Element">
            <summary>
            Original XElement used to parse
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.InputTag.ToString">
            <summary>
            String representation of the object
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.HtmlToXElement">
            <summary>
            Class to convert Html to XElement, uses HtmlAgilityPack
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.HtmlToXElement.Parse(System.String)">
            <summary>
            Parses an HTML as a XElement
            </summary>
            <param name="html">Html content to be parsed</param>
            <returns>XElement parsed</returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.UriHelper">
            <summary>
            Helper for Uri stuff
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.UriHelper.Combine(System.Uri,System.String)">
            <summary>
            Combines a Uri with a Relative Url into a new combined Uri
            </summary>
            <param name="parent">Base Uri</param>
            <param name="relative">Relative Url</param>
            <returns>New combined Uri</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.UriHelper.HasFragment(System.Uri)">
            <summary>
            Returns if uri has a Fragment
            </summary>
            <param name="uri">Uri to check</param>
            <returns>Returns true if it has a fragment, else otherwise</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.UriHelper.HasQuery(System.Uri)">
            <summary>
            Returns if uri has a Query
            </summary>
            <param name="uri">Uri to check</param>
            <returns>Returns true if it has a query, else otherwise</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.UriHelper.RemoveFragment(System.Uri)">
            <summary>
            Removes the fragment from a Uri
            </summary>
            <param name="uri">Uri to remove from</param>
            <returns>A new Uri without the fragment</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.UriHelper.RemoveQuery(System.Uri)">
            <summary>
            Removes the query from a Uri
            </summary>
            <param name="uri">Uri to remove from</param>
            <returns>A new Uri without the query</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.UriHelper.RemoveQueryAndFragment(System.Uri)">
            <summary>
            Removes the query and/or the fragment from a Uri
            </summary>
            <param name="uri">Uri to remove from</param>
            <returns>A new Uri without the query and fragment</returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.XElementHelper">
            <summary>
            Helper to do stuff with pages parsed as XElement 
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.XElementHelper.GetTables(System.Xml.Linq.XElement)">
            <summary>
            Enumerates all XElements named 'table'
            </summary>
            <param name="Root">Root element to be enumerated</param>
            <returns>Enumeration of XElement tables</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.XElementHelper.GetAllTables(System.Xml.Linq.XElement)">
            <summary>
            Enumerates all XElements named 'table' as DataTable collection
            </summary>
            <param name="Root">Root element to be enumerated</param>
            <returns>Enumeration of DataTable tables</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.XElementHelper.GetTable(System.Xml.Linq.XElement)">
            <summary>
            Converts a XElement table to a DataTable
            </summary>
            <param name="table">Table element to be converted</param>
            <returns>DataTable converted</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.XElementHelper.GetChilds(System.Xml.Linq.XElement,System.String)">
            <summary>
            Enumerates all nodes with Name.LocalName equals to Name
            </summary>
            <param name="Root">Root object to start searching</param>
            <param name="Name">Name to be searched</param>
            <returns>Enumeration of XElements named Name</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.XElementHelper.GetChilds(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Enumerates all nodes with any Name.LocalName equals to Names
            </summary>
            <param name="Root">Root object to start searching</param>
            <param name="Names">Names to be searched</param>
            <returns>Enumeration of XElements named any of Names</returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Helper.XmlSerializerHelper">
            <summary>
            Helper class to serialize and deserialize stuff using XML
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.XmlSerializerHelper.SerializeToFile``1(``0,System.String)">
            <summary>
            Serialize a generic {T} object to a file
            </summary>
            <typeparam name="T">Type of the objects to be serialized</typeparam>
            <param name="obj">Object to be serialized</param>
            <param name="file">File path of the file</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Helper.XmlSerializerHelper.DeserializeFromFile``1(System.String)">
            <summary>
            Deserialize a generic {T} object from a file
            </summary>
            <typeparam name="T">Type of the objects to be deserialized</typeparam>
            <param name="file">File path of the file</param>
            <returns>An instance of {T} with data from the file</returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.InitializationParams">
            <summary>
            Defines Initialization Parameters to a SimpleSpider instance
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.#ctor">
            <summary>
            Creates a new InitializationParams
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.InitializationParams.Cacher">
            <summary>
            Gets or sets the cacher to be used by the spider
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.InitializationParams.Downloader">
            <summary>
            Gets or sets the downloader to be used by the spider
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.InitializationParams.Parsers">
            <summary>
            Gets the list of parsers the spider should be initialized with
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.InitializationParams.SpiderDirectory">
            <summary>
            Gets or sets the working SpiderDirectory to be used by the spider
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.InitializationParams.ConfigurationPrototype">
            <summary>
             Gets or sets a Configuration prototype to be used by the spider
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.SetSpiderStartupPath(System.String)">
            <summary>
            Instructs spider to use this path
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.SetSpiderStartupDirectory(System.IO.DirectoryInfo)">
            <summary>
            Instructs spider to use this directory
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.SetCacher(Net.RafaelEstevam.Spider.Interfaces.ICacher)">
            <summary>
            Instructs spider to use this specific Cacher
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.SetDownloader(Net.RafaelEstevam.Spider.Interfaces.IDownloader)">
            <summary>
            Instructs spider to use this specific Downloader
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.SetOfflineMode">
            <summary>
            Instructs spider to OfflineMode, set the Downloader to a NullDownloader instance on 'Ignore Mode'
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.AddParser``1(Net.RafaelEstevam.Spider.Interfaces.IParser{``0})">
            <summary>
            Adds a Parser to the spider. Parsers can be added and removed on-the-fly
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.SetLogger(Serilog.ILogger)">
            <summary>
            Sets a logger to be used by the spider instance
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.SetConfig(System.Action{Net.RafaelEstevam.Spider.Configuration})">
            <summary>
            Allows to a chainable Action to set some configurations
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.InitializationParams.Default001(System.Int32)">
            <summary>
            Frozen in time default: ContentCacher, WebClientDownloader, NoLimitCaching, and AutoAnchorsLinks enabled
            </summary>
            <param name="DownloadDelay">Config.DownloadDelay in milliseconds</param>
            <returns></returns>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Interfaces.ICacher">
            <summary>
            Represents a module to fetch resources from the disk/memory
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Interfaces.ICacher.HasCache(System.Uri)">
            <summary>
            Returns if this module has a cache for this resource
            </summary>
            <param name="uri">Resource the be checked for</param>
            <returns>True if has a cache for the resource</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Interfaces.ICacher.GenerateCacheFor(Net.RafaelEstevam.Spider.FetchCompleteEventArgs)">
            <summary>
            Create cache for this fetched resource
            </summary>
            <param name="FetchComplete">The fetched resource to create a cache for</param>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Interfaces.IDownloader">
            <summary>
            Represents a module to fetch resources from the internet
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Interfaces.IFetcher">
            <summary>
            Represents a module that Fetch some resource
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Interfaces.IFetcher.FetchCompleted">
            <summary>
            Event fired when a fetch complete
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Interfaces.IFetcher.FetchFailed">
            <summary>
            Event fired when a fetch fail
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Interfaces.IFetcher.ShouldFetch">
            <summary>
            Event fired to check if a fetch can occur
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Interfaces.IFetcher.Initialize(System.Collections.Concurrent.ConcurrentQueue{Net.RafaelEstevam.Spider.Link},Net.RafaelEstevam.Spider.Configuration)">
            <summary>
            Pass spider data to initialize the module
            </summary>
            <param name="WorkQueue">The queue this module will use to fetch data from</param>
            <param name="Config">Current configuration</param>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Interfaces.IFetcher.IsProcessing">
            <summary>
            The module is busy processing some resource
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Interfaces.IFetcher.Start">
            <summary>
            Starts the module
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Interfaces.IFetcher.Stop">
            <summary>
            Stops the module
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Interfaces.ParseData`1">
            <summary>
            Represents a method that passes parsed data
            </summary>
            <typeparam name="T">Type of data to be parsed</typeparam>
            <param name="sender">The source of the event</param>
            <param name="parserEventArgs">Object containing parsed data</param>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Interfaces.IParserBase">
            <summary>
            Base Interface to construct IParser`T` from
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Interfaces.IParserBase.MimeTypes">
            <summary>
            A list of MimeTypes/Content-type this parser can process
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Interfaces.IParserBase.Parse(Net.RafaelEstevam.Spider.SimpleSpider,Net.RafaelEstevam.Spider.FetchCompleteEventArgs)">
            <summary>
            Method to initiate the parsing process
            </summary>
            <param name="spider">Spider object</param>
            <param name="fetchInfo">Fetched data to parse from</param>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Interfaces.IParser`1">
            <summary>
            Interface to create custom parsers from
            </summary>
            <typeparam name="T">The type of the data processed</typeparam>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Interfaces.IParser`1.ParsedData">
            <summary>
            Event to propagate parsed data
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Interfaces.ParserEventArgs`1">
            <summary>
            Arguments to the Parser Event
            </summary>
            <typeparam name="T">The type of the event data generated by the event</typeparam>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Interfaces.ParserEventArgs`1.#ctor(Net.RafaelEstevam.Spider.FetchCompleteEventArgs,`0)">
            <summary>
            Constructs a new ParserEventArgs
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Interfaces.ParserEventArgs`1.FetchInfo">
            <summary>
            Original FetchCompleteEventArgs received by the parser
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Interfaces.ParserEventArgs`1.ParsedData">
            <summary>
            Dataparsed by the parser
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Link">
            <summary>
            Represents a Link enqueued or fetched
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.Uri">
            <summary>
            Primary Uri, the resource to be fetched
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.SourceUri">
            <summary>
            Uri where the Uri property was found
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.MovedUri">
            <summary>
            When redirected, the old Uri will be stored here
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.RewrittenUri">
            <summary>
            When rewritten, the old Uri will be stored here
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.FetchStart">
            <summary>
            Fetch start Datetime
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.FetchEnd">
            <summary>
            Fetch finish Datetime
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.FetchTime">
            <summary>
            Fetch duration
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Link.FetchCompleteCallBack">
            <summary>
            Specify and additional CallBack for this resource
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Link.#ctor(System.Uri,System.Uri)">
            <summary>
            Constructs a new Link
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Link.ToString">
            <summary>
            Returns the string representation of the Uri property
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Link.ResourceMoved(System.Uri)">
            <summary>
            Change the properties to reflect a moved resource
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Link.ResourceRewritten(System.Uri)">
            <summary>
            Change the properties to reflect a rewritten resource
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Link.op_Implicit(Net.RafaelEstevam.Spider.Link)~System.Uri">
            <summary>
            Implicit convertion from Link to Uri, returns Uri property
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Parsers.HtmlXElementParser">
            <summary>
            Html to XElement parser
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Parsers.HtmlXElementParser.MimeTypes">
            <summary>
            MimeTypes supported by this parser
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Parsers.HtmlXElementParser.ParsedData">
            <summary>
            Event with the html parsed as XElement
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Parsers.JsonDeserializeParser`1">
            <summary>
            Json parser to deserialize given T class
            </summary>
            <typeparam name="T">Type to be deserialized to</typeparam>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Parsers.JsonDeserializeParser`1.#ctor">
            <summary>
            Empty/Default constructor
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Parsers.JsonDeserializeParser`1.#ctor(Net.RafaelEstevam.Spider.Interfaces.ParseData{`0})">
            <summary>
            Constructor with pre-defined callback. Easy to create and add reference in one line
            </summary>
            <param name="callback">Callback to be fired when this parser complete</param>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Parsers.JsonDeserializeParser`1.MimeTypes">
            <summary>
            Mime types supported by this parser
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Parsers.JsonDeserializeParser`1.ParsedData">
            <summary>
            Event with parsed data
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Parsers.JsonParser">
            <summary>
             Generic Json parser, return Newtonsoft's JObject
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Parsers.JsonParser.MimeTypes">
            <summary>
            Mime types supported by this parser
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Parsers.JsonParser.ParsedData">
            <summary>
            Event with parsed data
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Parsers.XmlXElementParser">
            <summary>
            Generic Xml to XElement parser
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Parsers.XmlXElementParser.Encoding">
            <summary>
            Encoding to be used by the parser
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Parsers.XmlXElementParser.MimeTypes">
            <summary>
            Mime types supported by this parser
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.Parsers.XmlXElementParser.ParsedData">
            <summary>
            Event with parsed data
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.SimpleSpider">
            <summary>
            Simple spider class
            </summary>
            <example>
            <code>
            var spider = new SimpleSpider("BooksToScrape", new Uri("http://books.toscrape.com/"));
            spider.FetchCompleted += fetchCompleted_items;
            spider.Execute();
            </code>
            </example>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.SimpleSpider.FetchCompleted">
            <summary>
            Resource fetched completed
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.SimpleSpider.FetchFailed">
            <summary>
            Resource fetched failed
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.SimpleSpider.ShouldFetch">
            <summary>
            Check if some resource should be fetched
            Used to block list urls
            </summary>
        </member>
        <member name="E:Net.RafaelEstevam.Spider.SimpleSpider.FetchRewrite">
            <summary>
            Allow change the Uri just before it is added to the queue
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.Configuration">
            <summary>
            Spider configurations and parameters
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.SpiderName">
            <summary>
            Name of the spider
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.BaseUri">
            <summary>
            Base Uri to fetch, resources outside this host will not be fetched
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.Cacher">
            <summary>
            Current Cacher
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.Downloader">
            <summary>
            Current Downloader
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.Parsers">
            <summary>
            Current Parsers
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.SpiderWorkData">
            <summary>
            Spider private work data, mess with care
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.#ctor(System.String,System.Uri,Net.RafaelEstevam.Spider.InitializationParams)">
            <summary>
            Create a new spider to fetch data from some website
            See use examples on the Github page
            </summary>
            <param name="spiderName">A unique name for this spider. Folder will be created with that name</param>
            <param name="baseUri">The base Uri of the website. Pages outside this Host will not be fetched</param>
            <param name="params">Additional initialization parameters</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.Execute">
            <summary>
            Main execution loop, returns once finished
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.Execute(System.Threading.CancellationToken)">
            <summary>
            Main execution loop, returns once finished or cancelled
            </summary>
            <param name="cancellationToken">Cancelation token to prematurely stop</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.AddPages(System.Collections.Generic.IEnumerable{System.Uri},System.Uri)">
            <summary>
            Add page to fetch
            </summary>
            <param name="PagesToVisit">Uris to fetch</param>
            <param name="SourcePage">Uri where all the PagesToVisit was found</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.AddPage(System.Collections.Generic.IEnumerable{System.Uri},System.Uri)">
            <summary>
            Old method with a typo (singular) on name. Use [AddPages] (with 's') instead
            Will be removed soon
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.AddPage(System.Uri,System.Uri)">
            <summary>
            Add page to fetch
            </summary>
            <param name="PageToVisit">Uri to fetch</param>
            <param name="SourcePage">Uri where the PageToVisit was found</param>
            <returns>Link object</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.Collect(System.Collections.Generic.IEnumerable{System.Object},System.Uri)">
            <summary>
            Add items to the volatile collection. Don't forget to retrieve them later with CollectedItems()
            </summary>
            <param name="Objects">Objects collected</param>
            <param name="CollectedOn">Uri where the Object was found</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.Collect(System.Object,System.Uri)">
            <summary>
            Add item to the volatile collection. Don't forget to retrieve them later with CollectedItems()
            </summary>
            <param name="Object">Object collected</param>
            <param name="CollectedOn">Uri where the Object was found</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.CollectedItems">
            <summary>
            Get array with all Collected Objects
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.QueueFinished">
            <summary>
            All queues finished ?
            </summary>
            <returns>Whenever the queues finished</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.QueueSize">
            <summary>
            Current queues size
            </summary>
            <returns>Returns the size of the queue</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.HowToUse_PrintToConsole">
            <summary>
            Prints use instructions on console 
            See more on the GitHub project page: https://github.com/RafaelEstevamReis/SimpleSpider
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.SimpleSpider.CollectedData">
            <summary>
            Class to store volatile data during the process
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.CollectedData.#ctor(System.Object,System.String)">
            <summary>
            New data object to be stored
            </summary>
            <param name="Object">Object to be stored</param>
            <param name="CollectedOn">Where was it found</param>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.CollectedData.Object">
            <summary>
            Object stored
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.CollectedData.CollectedOn">
            <summary>
            Url of where was it found
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.CollectedData.CollectAt">
            <summary>
            DateTime of when was it found (in fact, stored)
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.SimpleSpider.SpiderData">
            <summary>
            Internal spider data storage
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.SimpleSpider.SpiderData.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.SimpleSpider.SpiderData.Error404">
            <summary>
            List of pages that once got a 404 error and should not be downloaded again
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Wrapers.HObject">
            <summary>
            Represents a Html Tags Collection
            </summary>
        </member>
        <member name="T:Net.RafaelEstevam.Spider.Wrapers.HObject.SearchType">
            <summary>
            Types of items to search
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.Wrapers.HObject.SearchType.ElementName">
            <summary>
            Search for Tag Name
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.Wrapers.HObject.SearchType.IdEquals">
            <summary>
            Search for ID attribute
            </summary>
        </member>
        <member name="F:Net.RafaelEstevam.Spider.Wrapers.HObject.SearchType.ClassContaining">
            <summary>
            Search for Class attribute
            </summary>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the HObject class
            </summary>
            <param name="x">A root XElement</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.#ctor(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Initializes a new instance of the HObject class
            </summary>
            <param name="xs">A collection of XElements</param>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Wrapers.HObject.Item(System.String,Net.RafaelEstevam.Spider.Wrapers.HObject.SearchType)">
            <summary>
            Gets a HObject with specified Name matching Type
            </summary>
            <param name="Name">Name of the element to search for</param>
            <param name="Type">Type of search</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="P:Net.RafaelEstevam.Spider.Wrapers.HObject.Item(System.String)">
            <summary>
            Gets a HObject with specified Tag
            </summary>
            <param name="TagName">Name of the Tag to search for</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.Tags(System.String)">
            <summary>
            Returns all Tags named TagName
            </summary>
            <param name="TagName">The name of the tag</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.IDs(System.String)">
            <summary>
            Returns all Tags with ID equals to specified parameter
            </summary>
            <param name="IDsEquals">Id value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.OfID(System.String)">
            <summary>
            Filters current tags selecting only the ones with specified Id value
            </summary>
            <param name="IDsEquals">Id value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.Classes(System.String)">
            <summary>
            Returns all Tags with Class containing specified parameter
            Note: In HTML classes are an array of strings
            </summary>
            <param name="ClassName">The class name to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.OfClass(System.String)">
            <summary>
            Filters current tags selecting only the ones with specified Class value
            Note: In HTML classes are an array of strings
            </summary>
            <param name="ClassName">The class name to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.Having(System.String,System.String)">
            <summary>
            Returns all Tags with Named Attribute equals to specified parameter
            </summary>
            <param name="AttributeName">Name of the attribute</param>
            <param name="AttributeValue">Value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.OfWhich(System.String,System.String)">
            <summary>
            Filters current tags selecting only the ones with Named Attribute equals to specified parameter
            </summary>
            <param name="AttributeName">Name of the attribute</param>
            <param name="AttributeValue">Value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.op_Implicit(Net.RafaelEstevam.Spider.Wrapers.HObject)~System.Xml.Linq.XElement">
            <summary>
            Returns first XElement of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.op_Implicit(Net.RafaelEstevam.Spider.Wrapers.HObject)~System.Xml.Linq.XElement[]">
            <summary>
            Returns all XElements of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.op_Implicit(Net.RafaelEstevam.Spider.Wrapers.HObject)~System.String">
            <summary>
            Returns the Value of the first element of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
        <member name="M:Net.RafaelEstevam.Spider.Wrapers.HObject.op_Implicit(Net.RafaelEstevam.Spider.Wrapers.HObject)~System.String[]">
            <summary>
            Returns the Values of all elements of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
    </members>
</doc>
