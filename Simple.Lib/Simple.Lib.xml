<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Simple.Lib</name>
    </assembly>
    <members>
        <member name="T:RafaelEstevam.Simple.Spider.Cachers.ContentCacher">
            <summary>
            Simple cacher, stores the content of the resource fetched locally
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.IsProcessing">
            <summary>
            Gets if is processing
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.FetchCompleted">
            <summary>
            Occurs when fetch is complete 
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.FetchFailed">
            <summary>
            Occurs when fetch fails
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.ShouldFetch">
            <summary>
            Occurs before fetch to check if it should fetch this resource
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.ShouldUseCache">
            <summary>
            Occurs before fetch to check if the cache can be used
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.Initialize(System.Collections.Concurrent.ConcurrentQueue{RafaelEstevam.Simple.Spider.Link},RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Initialize the cacher
            </summary>
            <param name="WorkQueue">The queue to be used</param>
            <param name="Config">The configuration to be used</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.GenerateCacheFor(RafaelEstevam.Simple.Spider.FetchCompleteEventArgs)">
            <summary>
            Instructs the cacher to generate a cache for the new resource
            </summary>
            <param name="FetchComplete">Fetch data to save</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.HasCache(RafaelEstevam.Simple.Spider.Link)">
            <summary>
            Gets if a cache exists
            </summary>
            <param name="link">Uri to check for</param>
            <returns>True if has a cache, False otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.Start">
            <summary>
            Starts the Cacher operation
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.ContentCacher.Stop">
            <summary>
            Stops the Cacher operation
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Cachers.NullCacher">
            <summary>
            Empty cacher, discards all cache requests
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.NullCacher.FetchCompleted">
            <summary>
            Unused on this fetcher
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.NullCacher.FetchFailed">
            <summary>
            Unused on this fetcher
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.NullCacher.ShouldFetch">
            <summary>
            Unused on this fetcher
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Cachers.NullCacher.ShouldUseCache">
            <summary>
            Unused on this fetcher
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.NullCacher.GenerateCacheFor(RafaelEstevam.Simple.Spider.FetchCompleteEventArgs)">
            <summary>
            Instructs the cacher to generate a cache for the new resource
            </summary>
            <param name="FetchComplete">Fetch data to save</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.NullCacher.HasCache(RafaelEstevam.Simple.Spider.Link)">
            <summary>
            Gets if a cache exists, always False for this cacher
            </summary>
            <param name="link">Uri to check for</param>
            <returns>always false for this cacher</returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Cachers.NullCacher.IsProcessing">
            <summary>
            Gets if is processing, always False for this cacher
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.NullCacher.Initialize(System.Collections.Concurrent.ConcurrentQueue{RafaelEstevam.Simple.Spider.Link},RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Initialize the cacher
            </summary>
            <param name="WorkQueue">The queue to be used</param>
            <param name="Config">The configuration to be used</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.NullCacher.Start">
            <summary>
            Stats this cacher
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Cachers.NullCacher.Stop">
            <summary>
            Stops this cacher
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Configuration">
            <summary>
            Class to hold the configuration for the spider
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.SpiderDirectory">
            <summary>
            Spider main directory
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.SpiderDataDirectory">
            <summary>
            Spider data directory
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Spider_LogFile">
            <summary>
            Spider log file
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Logger">
            <summary>
            Standard log
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Auto_RewriteRemoveFragment">
            <summary>
            Enable auto rewrite of Uri to remove Fragment
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Enable_AutoRewriteRemoveFragment">
            <summary>
            Enables automatic UriRewrite to remove fragments
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Disable_AutoRewriteRemoveFragment">
            <summary>
            Disables automatic UriRewrite to remove fragments
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Cache_Enable">
            <summary>
            Are caching enabled? ICacher must support
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Enable_Caching">
            <summary>
            Enables Caching using Cache_Enable property
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Disable_Caching">
            <summary>
            Disables Caching using Cache_Enable property
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Cache_Lifetime">
            <summary>
            How long cache files are valid?  ICacher must support
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Set_CachingTTL(System.TimeSpan)">
            <summary>
            Sets cache limit
            </summary>
            <param name="timeSpan">Max age of the cache resource</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Set_CachingNoLimit">
            <summary>
            Sets cache limit to Infinity (no limit), using Cache_Lifetime property set to null
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.DownloadDelay">
            <summary>
            Time to wait in milliseconds between downloads
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Set_DownloadDelay(System.TimeSpan)">
            <summary>
            Sets Downloader delay using DownloadDelay property
            </summary>
            <param name="Delay">Delay value</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Set_DownloadDelay(System.Int32)">
            <summary>
            Sets Downloader delay in milliseconds using DownloadDelay property
            </summary>
            <param name="Delay">Value in milliseconds</param>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Cookies_Enable">
            <summary>
            Are cookies enabled? IDownloader must support
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Enable_Cookies">
            <summary>
            Enables downloader to use Cookies, if supported. Uses Cookies_Enable property
            </summary>
            <returns></returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Disable_Cookies">
            <summary>
            Disables downloader from using Cookies, if supported. Uses Cookies_Enable property
            </summary>
            <returns></returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Paused">
            <summary>
            Inform all components to temporarily pause
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Paused_Cacher">
            <summary>
            Inform cacher to temporarily pause
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Paused_Downloader">
            <summary>
            Inform downloader to temporarily pause
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.Auto_AnchorsLinks">
            <summary>
            Enable auto collection of html Anchors tags
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Configuration.SpiderAllowHostViolation">
            <summary>
            Enable Host violation, use with caution or the entire internet will be downloaded
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Enable_AutoAnchorsLinks">
            <summary>
            Enable auto collection of html Anchors tags, uses Auto_AnchorsLinks property
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Configuration.Disable_AutoAnchorsLinks">
            <summary>
            Disable auto collection of html Anchors tags, uses Auto_AnchorsLinks property
            </summary>
            <returns></returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader">
            <summary>
            Simple Downloader using System.Net.Http.HttpClient
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.FetchCompleted">
            <summary>
            Occurs when fetch is complete 
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.FetchFailed">
            <summary>
            Occurs when fetch fails
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.ShouldFetch">
            <summary>
            Occurs before fetch to check if it should fetch this resource
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.BeforeRequest">
            <summary>
            Occurs before fetch to allow request manipulation
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.IncludeRequestHeaders">
            <summary>
            Collection of Headers to be included on the Request
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.#ctor(System.Boolean)">
            <summary>
            Creates a HttpClientDownloader instance
            </summary>
            <param name="AddDefaultHeaders">Specify when initialize some default headers</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.Initialize(System.Collections.Concurrent.ConcurrentQueue{RafaelEstevam.Simple.Spider.Link},RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Initialize the downloader
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.IsProcessing">
            <summary>
            Indicates when is processing a resource
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.Start">
            <summary>
            Starts the Downloader operation
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.HttpClientDownloader.Stop">
            <summary>
            Stops the Downloader operation
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader">
            <summary>
            Empty downloader, discards all download requests
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.DiscardModeTypes">
            <summary>
            Discard modes
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.DiscardModeTypes.Ignore">
            <summary>
            Downloader should ignore items
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.DiscardModeTypes.CompleteEmpty">
            <summary>
            Downloader should invoke an empty FetchCompleted
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.DiscardModeTypes.Fail">
            <summary>
            Downloader should invoke an empty FetchFailed
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.IsProcessing">
            <summary>
            Gets if is processing data
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.DiscardMode">
            <summary>
            Gets or sets the current queue items DiscardMode
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.FetchCompleted">
            <summary>
            Occurs when DiscardMode is set to CompleteEmpty 
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.FetchFailed">
            <summary>
            Occurs when DiscardMode is set to Fail
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.ShouldFetch">
            <summary>
            Occurs before fetch to check if it should fetch this resource
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.Initialize(System.Collections.Concurrent.ConcurrentQueue{RafaelEstevam.Simple.Spider.Link},RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Initialize the downloader
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.Start">
            <summary>
            Starts the Downloader operation
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.NullDownloader.Stop">
            <summary>
            Stops the Downloader operation
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader">
            <summary>
            Simple Downloader using WebClient
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.ExposeInternalWebClient">
            <summary>
            Exposes the internal webclient
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.FetchTempo">
            <summary>
            List with last Fetch duration
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.FetchCompleted">
            <summary>
            Occurs when fetch is complete 
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.FetchFailed">
            <summary>
            Occurs when fetch fails
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.ShouldFetch">
            <summary>
            Occurs before fetch to check if it should fetch this resource
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.Initialize(System.Collections.Concurrent.ConcurrentQueue{RafaelEstevam.Simple.Spider.Link},RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Initialize the downloader
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.IsProcessing">
            <summary>
            Indicates when is processing a resource
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.Start">
            <summary>
            Starts the Downloader operation
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.Stop">
            <summary>
            Stops the Downloader operation
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.CustomWebClient">
            <summary>
            Internal WebClient overload to expose protected stuff
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.CustomWebClient.LastRequest">
            <summary>
            Last request used
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.CustomWebClient.EnableCookies">
            <summary>
            Defines if next request should use cookies
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.CustomWebClient.CookieContainer">
            <summary>
            Current cookie container
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Downloaders.WebClientDownloader.CustomWebClient.GetWebRequest(System.Uri)">
            <summary>
            Return the WebRequest for this WebClient
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchComplete">
            <summary>
            Represents a method that passes fetch completed data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object containing fetch data</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs">
            <summary>
            Arguments to de FetchComplete event
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.DefaultEncoding">
            <summary>
            Defines an default Encoding to be used when no instance Encoding is defined 
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.Encoding">
            <summary>
            Instance encoding to be used. If null, static DefaultEncoding will be used
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.Result">
            <summary>
            Byte array with the data fetched
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.ResponseHeaders">
            <summary>
            The response headers returned 
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.Html">
            <summary>
            LazyLoaded Text (Html?) content parsed from byte[] Result encoded with static DefaultEncoding (UTF-8) or Encoding properties
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.GetDocument">
            <summary>
            Parses the Result bytes with HtmlAgilityPack
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.GetDocument(System.Text.Encoding)">
            <summary>
            Parses the Html string with HtmlAgilityPack using specified encoding
            </summary>
            <param name="SpecifyEncoding">Encoding to use, if NULL instance Encoding will be used. If NULL static DefaultEncoding will be used.</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.GetHObject">
            <summary>
            Get the HObject representation of the HtmlDocument using GetDocument()
            </summary>
            <returns>A HObject</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.HtmlContent(System.Text.Encoding)">
            <summary>
            Parses  byte[] Result using and specific Encoding. The 'Html' property will be updated with this value
            </summary>
            <param name="enc">Encoding to be used</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.#ctor(RafaelEstevam.Simple.Spider.Link,System.Byte[],RafaelEstevam.Simple.Spider.HeaderCollection,RafaelEstevam.Simple.Spider.HeaderCollection)">
            <summary>
            Constructs a new FetchCompleteEventArgs
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.LoadFetchResult(System.IO.Stream)">
            <summary>
            Load a FetchCompleteEventArgs from a stream
            </summary>
            <param name="stream">Stream to load from</param>
            <returns>FetchCompleteEventArgs loaded</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchCompleteEventArgs.SaveFetchResult(RafaelEstevam.Simple.Spider.FetchCompleteEventArgs,System.IO.Stream)">
            <summary>
            Saves a FetchCompleteEventArgs to a stream
            </summary>
            <param name="fetchComplete">Object to be saved</param>
            <param name="stream">Stream to save to</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchEventArgs">
            <summary>
            Arguments to de Fetch event
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchEventArgs.EventSource">
            <summary>
            Module that fired the event
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.FetchEventArgs.EventSource.Cacher">
            <summary>
            Event initiated by the Cacher
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.FetchEventArgs.EventSource.Downloader">
            <summary>
            Event initiated by the Downloader
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.FetchEventArgs.EventSource.Scheduler">
            <summary>
            Event initiated by the Scheduler
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchEventArgs.RequestHeaders">
            <summary>
            The request headers used to query
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchEventArgs.Link">
            <summary>
            Link from where the resource was fetched
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchEventArgs.Source">
            <summary>
            Source from this event
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchFail">
            <summary>
            Represents a method that passes fetch failed data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object containing fetch failed info</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchFailEventArgs">
            <summary>
            Arguments to de FetchFail event
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchFailEventArgs.Error">
            <summary>
            Error raised during fetch
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchFailEventArgs.HttpErrorCode">
            <summary>
            HTTP error code
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchFailEventArgs.#ctor(RafaelEstevam.Simple.Spider.Link,System.Int32,System.Exception,RafaelEstevam.Simple.Spider.HeaderCollection)">
            <summary>
            Constructs a FetchFailEventArgs
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchRewrite">
            <summary>
            Represents a method that passes fetch rewrite data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object allowing changing the Uri</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchRewriteEventArgs">
            <summary>
            Arguments to de FetchRewrite event
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchRewriteEventArgs.#ctor(System.Uri)">
            <summary>
            Construct a FetchRewriteEventArgs
            </summary>
            <param name="CurrentUri"></param>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchRewriteEventArgs.CurrentUri">
            <summary>
            The original Uri added to the queue
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchRewriteEventArgs.NewUri">
            <summary>
            New Uri to be fetched
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchRewriteEventArgs.ShowOnLog">
            <summary>
            Defines if should log the rewrite operation
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchT`1">
            <summary>
            Multi-purpose Fetch event args
            </summary>
            <typeparam name="T">Type of the argument</typeparam>
            <param name="Sender">Event sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.FetchTEventArgs`1">
            <summary>
            FetchT event EventArgs
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchTEventArgs`1.Link">
            <summary>
            Link from where the resource was fetched
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.FetchTEventArgs`1.Arg">
            <summary>
            Gets or Sets T argument
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.FetchTEventArgs`1.#ctor(RafaelEstevam.Simple.Spider.Link,`0)">
            <summary>
            Creates a new instance of FetchTEventArgs
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.ShouldFetch">
            <summary>
            Represents a method that checks if should fetch data
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object allowing cancel the fetching process</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs">
            <summary>
            Arguments to de ShouldFetch event
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Reasons">
            <summary>
            Reason to not fetch some resource
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Reasons.AlreadyFetched">
            <summary>
            This resource was already fetched
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Reasons.UserCancelled">
            <summary>
            User cancelled the process
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Reasons.UserCancelledSilent">
            <summary>
            User cancelled the process, ignore on Log
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Reasons.PreviousError">
            <summary>
            This resource caused an error on previous session
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Reasons.None">
            <summary>
            There is no specific reason
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Cancel">
            <summary>
            Instruct the spider to NOT fetch this resource
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.Reason">
            <summary>
            Informs reason to do not fetch
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.CancelIfContains(System.String)">
            <summary>
            Sets [Cancel] to True if Link.Uri contains [PartialUrl]
            </summary>
            <param name="PartialUrl">String to be searched</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.CancelIfNotContains(System.String)">
            <summary>
            Sets [Cancel] to True if Link.Uri DO NOT contains [PartialUrl]
            </summary>
            <param name="PartialUrl">String to be searched</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.AllowIfContains(System.String)">
            <summary>
            Sets [Cancel] to FALSE if Link.Uri contains [PartialUrl]
            </summary>
            <param name="PartialUrl">String to be searched</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.AllowIfNotContains(System.String)">
            <summary>
            Sets [Cancel] to FALSE if Link.Uri DO NOT contains [PartialUrl]
            </summary>
            <param name="PartialUrl">String to be searched</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldFetchEventArgs.#ctor(RafaelEstevam.Simple.Spider.Link)">
            <summary>
            Creates a new ShouldFetchEventArgs
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.ShouldUseCache">
            <summary>
            Represents a method that checks if should use the cache
            </summary>
            <param name="Sender">The source of the event</param>
            <param name="args">Object allowing cancel the caching load process</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs">
            <summary>
            Arguments to de ShouldFetch event
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs.PageCacheDate">
            <summary>
            Gets when the cache was generated
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs.PageCacheAge">
            <summary>
            Gets the cache age
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs.Cancel">
            <summary>
            Instruct the spider to NOT use this cache
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs.CancelIfContains(System.String)">
            <summary>
            Sets [Cancel] to True if Link.Uri contains [PartialUrl]
            </summary>
            <param name="PartialUrl">String to be searched</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs.CancelIfOlderThan(System.TimeSpan)">
            <summary>
            Sets [Cancel] to True if PageCacheAge is older than [span]
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs.CancelIfNewerThan(System.TimeSpan)">
            <summary>
            Sets [Cancel] to True if PageCacheAge is newer than [span]
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.ShouldUseCacheEventArgs.#ctor(RafaelEstevam.Simple.Spider.Link)">
            <summary>
            Creates a new ShouldUseCacheEventArgs
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Extensions.RequestHeaderExtension">
            <summary>
            Request Headers extensions
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.RequestHeaderExtension.AddBaseRequestHeaders(RafaelEstevam.Simple.Spider.HeaderCollection)">
            <summary>
            Adds generic User-Agent, Accept-Language, Accept-Encoding, Accept, Dnt, and Upgrade-Insecure-Requests
            </summary>
            <param name="Header">Headers reference to add to</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.RequestHeaderExtension.AddFirefoxRequestHeaders(RafaelEstevam.Simple.Spider.HeaderCollection)">
            <summary>
            Adds AddBaseRequestHeaders() then a firefox UA
            </summary>
            <param name="Header">Headers reference to add to</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.RequestHeaderExtension.AddChromeW10RequestHeaders(RafaelEstevam.Simple.Spider.HeaderCollection)">
            <summary>
            Adds AddBaseRequestHeaders() then a Chrome Windows10 UA
            </summary>
            <param name="Header">Headers reference to add to</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.RequestHeaderExtension.AddChromeLinuxRequestHeaders(RafaelEstevam.Simple.Spider.HeaderCollection)">
            <summary>
            Adds AddBaseRequestHeaders() then a Chrome Linux X11 x64 UA
            </summary>
            <param name="Header">Headers reference to add to</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Extensions.TextExtensions">
            <summary>
            Extensions to deal with text
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.HtmlDecode(System.String)">
            <summary>
            Decodes text using helper HtmlParseHelper.HtmlDecode
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.TruncateMax(System.String,System.Int32)">
            <summary>
            Truncates a string to a specified max length
            </summary>
            <param name="Text">Text to be truncated</param>
            <param name="MaxLength">Length to be truncated at</param>
            <returns>Original string or new truncated one</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.IsWhiteSpace(System.String)">
            <summary>
            Indicates whether all characters are categorized as white space
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.IsDigit(System.String)">
            <summary>
            Indicates whether all characters are categorized as decimal digit
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.IsLetterOrDigit(System.String)">
            <summary>
            Indicates whether all characters are categorized as a leeter or a decimal digit
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.IsLetter(System.String)">
            <summary>
            Indicates whether all characters are categorized as letter
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.IsLower(System.String)">
            <summary>
            Indicates whether all characters are categorized as lowercase letter
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.IsUpper(System.String)">
            <summary>
            Indicates whether all characters are categorized as upperercase letter
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.HasAnyWhiteSpace(System.String)">
            <summary>
            Indicates whether any characters are categorized as white space
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.HasAnyDigit(System.String)">
            <summary>
            Indicates whether any characters are categorized as decimal digit
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.HasAnyLetterOrDigit(System.String)">
            <summary>
            Indicates whether any characters are categorized as a leeter or a decimal digit
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Extensions.TextExtensions.HasAnyLetter(System.String)">
            <summary>
            Indicates whether any characters are categorized as letter
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Files">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Files.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Files.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Files.README">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.HeaderCollection">
            <summary>
            Class to hold HTTP Header data
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance with specified Http Header lines
            </summary>
            <param name="HttpHeaderLines"></param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Creates a new instance with specified parameter
            </summary>
            <param name="kvp">Enumerable of KeyValuePairs</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a new instance with specified parameter
            </summary>
            <param name="nvc">A NameValueCollection to initialize from</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.#ctor">
            <summary>
            Creates a new empty instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.HeaderCollection.Item(System.String)">
            <summary>
            Access values with given Key
            </summary>
            <param name="Key">Key to search for</param>
            <returns>Value if found or NULL if key was not present</returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.HeaderCollection.AllKeys">
            <summary>
            Gets all keys
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.AddItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds the specified items to the collection
            </summary>
            <param name="kvp">Items do add</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.AddItems(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the specified NameValueCollection elements to the collection
            </summary>
            <param name="nvc">The NameValueCollection to add</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.AddItem(System.String,System.String)">
            <summary>
            Adds the specified key and value to the collection
            </summary>
            <param name="Key">The key of the element to add</param>
            <param name="Value">The value of the element to add</param>
            <returns>Returns this instance for chaining</returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.HeaderCollection.Count">
            <summary>
            Gets the number of elements of the collection
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.HeaderCollection.Pairs">
            <summary>
            Gets or sets all pairs as SerializableKeyValuePair, used by XmlSerialization
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.GetEnumerator">
            <summary>
            Enumerates through all pairs
            </summary>
            <returns></returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.ToString">
            <summary>
            Fancy exhibition on debug
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.SaveHeader(RafaelEstevam.Simple.Spider.HeaderCollection)">
            <summary>
            Saves the Header in a line-based http-like format
            </summary>
            <param name="header">Link to be saved</param>
            <returns>Header</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.HeaderCollection.LoadHeader(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the Header from a line-based http-like format
            </summary>
            <param name="content">Lines to be saved</param>
            <returns>Header</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.SerializableKeyValuePair">
            <summary>
            Represents a Serializable KeyValuePair
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SerializableKeyValuePair.Key">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SerializableKeyValuePair.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SerializableKeyValuePair.op_Implicit(RafaelEstevam.Simple.Spider.SerializableKeyValuePair)~System.Collections.Generic.KeyValuePair{System.String,System.String}">
            <summary>
            Implicit conversion to KeyValuePair&lt;string, string&gt;
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SerializableKeyValuePair.op_Implicit(System.Collections.Generic.KeyValuePair{System.String,System.String})~RafaelEstevam.Simple.Spider.SerializableKeyValuePair">
            <summary>
            Implicit conversion from KeyValuePair&lt;string, string&gt;
            </summary>
            <param name="pair"></param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SerializableKeyValuePair.ToString">
            <summary>
            Fancy exhibition on debug
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.AnchorHelper">
            <summary>
            Helper to do stuff with html {a} tags 
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.AnchorHelper.GetAnchors(System.Uri,System.String)">
            <summary>
            Simple Substring based 'a' tag enumerator
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.AnchorHelper.GetAnchors(System.Uri,HtmlAgilityPack.HtmlDocument)">
            <summary>
            Get all anchors ('a' tag) and convert to an Uri collection
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.ConversionHelper">
            <summary>
            Helper to convert stuff frequently found on websites or API responses
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.ConversionHelper.UnixEpoch(System.Int64)">
            <summary>
            Converts Unix Epoch from number to Datetime
            </summary>
            <param name="Timestamp">Numeric representation of Unix time</param>
            <returns>Datetime converted</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.ConversionHelper.UnixEpoch(System.DateTime)">
            <summary>
            Converts Unix Epoch from Datetime to number
            </summary>
            <param name="dateTime">Datetime component to be converted</param>
            <returns>>Numeric representation of Unix time</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.ConversionHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            Try convert Text to Decimal using InvariantCulture
            </summary>
            <param name="Text">Texto to be converted</param>
            <param name="OnError">Value returned if conversion fails</param>
            <returns>Value converted or OnError value</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.ConversionHelper.ToInt(System.String,System.Int32)">
            <summary>
            Try convert Text to Int using InvariantCulture
            </summary>
            <param name="Text">Texto to be converted</param>
            <param name="OnError">Value returned if conversion fails</param>
            <returns>Value converted or OnError value</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.ConversionHelper.ToDouble(System.String,System.Double)">
            <summary>
            Try convert Text to Double using InvariantCulture
            </summary>
            <param name="Text">Texto to be converted</param>
            <param name="OnError">Value returned if conversion fails</param>
            <returns>Value converted or OnError value</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.CSVHelper">
            <summary>
            Helper to do stuff with CSV data
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.CSVSplit(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Split CSV lines using semicolon (rfc4180 standard)
            </summary>
            <param name="Lines">Lines to be splitted</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.DelimiterSplit(System.Collections.Generic.IEnumerable{System.String},System.Char)">
            <summary>
            Split CSV lines using specified delimiter
            </summary>
            <param name="Lines">Lines to be splitted</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.FileSplit(System.String,System.Text.Encoding,System.Char)">
            <summary>
            Splits a CSV file even if its compressed as .gz or .zip
            </summary>
            <param name="path">Path of the file</param>
            <param name="encoding">Specify which encoding should be used</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.FileSplit(System.IO.FileInfo,System.Text.Encoding,System.Char)">
            <summary>
            Splits a CSV file even if its compressed as .gz or .zip
            </summary>
            <param name="fi">File to be read</param>
            <param name="encoding">Specify which encoding should be used</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.LoadRows(System.String,System.Text.Encoding,System.Char,System.Boolean)">
            <summary>
            Load DataRows from csv file
            </summary>
            <param name="path">Path of the file</param>
            <param name="encoding">Specify which encoding should be used</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <param name="hasHeader">Defines if the first row is the header</param>
            <returns></returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.LoadFile(System.String,System.Text.Encoding,System.Char,System.Boolean)">
            <summary>
            Read a CSV file even if its compressed as .gz or .zip
            </summary>
            <param name="path">Path of the file</param>
            <param name="encoding">Specify which encoding should be used</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <param name="hasHeader">Defines if the first row is the header</param>
            <returns>A datatable with data</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.FileSplit(System.IO.StreamReader,System.Char)">
            <summary>
            Splits lines from a stream
            </summary>
            <param name="streamReader">Stream to get lines from</param>
            <param name="delimiter">Specify which delimiter should be used</param>
            <returns>Enumeration of an array of strings</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.CSVHelper.ToDataTable(System.Collections.Generic.IEnumerable{System.String[]},System.Boolean)">
            <summary>
            Exports the CSV result to a DataTable
            </summary>
            <param name="data">Data returned from other methods</param>
            <param name="hasHeader">Defines if the first row is the header</param>
            <returns>A datatable with data</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.FetchHelper">
            <summary>
            Helper to fetch stuff
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.FetchHelper.Logger">
            <summary>
            Defines a default looger, if NULL Console.WriteLine(...) will be used
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Helper.FetchHelper.BeforeFetch">
            <summary>
            Occurs before fetching a resource
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.FetchHelper.MaxCacheAge">
            <summary>
            Gets or sets the cache max age
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.FetchHelper.LastFetchedData">
            <summary>
            Gets last fetched data. All fetchs calls FetchResource, so all calls fills this property. 
            This do NOT apply to cached values
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.FetchHelper.LastFetchedText">
            <summary>
            Gets last fetched text. Almosts all fetchs calls FetchResourceText, so almost all calls fills this property. 
            This DO apply to cached values
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.FetchHelper.LastFetchedUri">
            <summary>
            Gets last fetched uri
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResource(System.Uri)">
            <summary>
            Fetch resource from uri
            </summary>
            <param name="uri">Uri to fetch from</param>
            <returns>Byte array with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResource(System.Uri,System.Boolean)">
            <summary>
            Fetch resource from uri with caching supported
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enableCaching">Defines if should use caching</param>
            <returns>Byte array with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceText(System.Uri,System.Text.Encoding,System.Boolean)">
            <summary>
            Fetch resource from uri
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <param name="enableCaching">Defines if should use caching</param>
            <returns>String with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceXElement(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a XElement from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>XElement with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceDocument(System.Uri,System.Text.Encoding,System.Boolean)">
            <summary>
            Fetch resource from uri and parse a HtmlDocument from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <param name="enableCaching">Defines if should use caching</param>
            <returns>HtmlDocument with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceHObject(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a HObject from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>HObject with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceJObject(System.Uri,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a JObject from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>JObject with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceJObject(System.Uri,Newtonsoft.Json.Linq.JsonLoadSettings,System.Text.Encoding)">
            <summary>
            Fetch resource from uri and parse a JObject from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="loadSettings">JsonLoadSettings to parse with</param>
            <param name="enc">Defines which encoding should be used</param>
            <returns>JObject with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceJson``1(System.Uri,System.Text.Encoding,System.Boolean)">
            <summary>
            Fetch resource from uri and deserialize T from it
            </summary>
            <param name="uri">Uri to fetch from</param>
            <param name="enc">Defines which encoding should be used</param>
            <param name="enableCaching">Defines if should use caching</param>
            <returns>T deserialized with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceJson``1(System.Uri,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Boolean)">
            <summary>
            Fetch resource from uri and deserialize T from it
            </summary>
            <param name="uri">Uri to fetch from></param>
            <param name="settings">JsonSerializerSettings Settings</param>
            <param name="enc">Defines which encoding should be used</param>
            <param name="enableCaching">Defines if should use caching</param>
            <returns>T deserialized with data fetched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.FetchHelper.FetchResourceXml``1(System.Uri,System.Text.Encoding,System.Boolean)">
            <summary>
            Fetch resource from uri and deserialize T from it
            </summary>
            <param name="uri">Uri to fetch from></param>
            <param name="enc">Defines which encoding should be used</param>
            <param name="enableCaching">Defines if should use caching</param>
            <returns>T deserialized with data fetched</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.HtmlParseHelper">
            <summary>
            Class to parse html with HtmlAgilityPack
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.HtmlParseHelper.ParseHtmlDocument(System.String)">
            <summary>
            Parses an Html string into a HtmlDocument
            </summary>
            <param name="html">Html content</param>
            <returns>Html Document</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.HtmlParseHelper.ParseHtmlDocument(System.IO.Stream)">
            <summary>
            Parses an stream into a HtmlDocument
            </summary>
            <param name="stream">stream content</param>
            <returns>Html Document</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.HtmlParseHelper.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML text using System.Net.WebUtility.HtmlDecode
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement">
            <summary>
            Class to convert Html to XElement, uses HtmlAgilityPack. Avoid XElement, use HtmlAgilityPack built in Document instead
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.XElementParser">
            <summary>
            XElement parse modes
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.XElementParser.LoadFromXmlReader">
            <summary>
            Saves a Stream with the document and parse with XElement.Parse
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.XElementParser.RecursiveNodeParser">
            <summary>
            Recursively iterate over elements and converts to XElement
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.DefaultSearchForInvalidNames">
            <summary>
            Search for invalid Attribute names and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.DefaultSearchAndRemoveScripts">
            <summary>
            Search for Script tags and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.DefaultSearchAndRemoveStyleElements">
            <summary>
            Search for Style tags and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.DefaultSearchAndRemoveComments">
            <summary>
            Search for Comment blocks and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.DefaultTrimTextBlocks">
            <summary>
            Get os sets when text blocks should be trimmed
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.DefaultXElementParserMode">
            <summary>
            Sets the default XElement parsing mode
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.Parse(System.String)">
            <summary>
            Parses an HTML as a XElement with default options
            </summary>
            <param name="html">Html content to be parsed</param>
            <returns>XElement parsed</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.Parse(System.String,RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions)">
            <summary>
            Parses an HTML as a XElement
            </summary>
            <param name="html">Html content to be parsed</param>
            <param name="options">Parse options</param>
            <returns>XElement parsed</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.Parse(HtmlAgilityPack.HtmlDocument,RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions)">
            <summary>
            Parses an HtmlDocument as a XElement
            </summary>
            <param name="doc">HtmlDocument to be processed</param>
            <param name="options">Parse options</param>
            <returns>XElement returned</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions">
            <summary>
            Defines parsing options
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions.SearchForInvalidNames">
            <summary>
            Search for invalid Attribute names and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions.SearchAndRemoveScripts">
            <summary>
            Search for Script tags and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions.SearchAndRemoveStyleElements">
            <summary>
            Search for Style tags and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions.SearchAndRemoveComments">
            <summary>
            Search for Comment blocks and remove them
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions.XElementParserMode">
            <summary>
            Sets the XElement parsing mode
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.HtmlToXElement.ParseOptions.TrimTextBlocks">
            <summary>
            Get os sets when text blocks should be trimmed
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.RequestHelper">
            <summary>
            Class to request stuff
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.RequestHelper.Logger">
            <summary>
            Defines a default looger, if NULL Console.WriteLine(...) will be used
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Helper.RequestHelper.FetchCompleted">
            <summary>
            Occurs when fetch is complete 
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Helper.RequestHelper.FetchFailed">
            <summary>
            Occurs when fetch fails
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Helper.RequestHelper.BeforeRequest">
            <summary>
            Occurs before fetch to allow request manipulation
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.RequestHelper.RequestHeaders">
            <summary>
            Collection of Headers to be included on the Request
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Helper.RequestHelper.Cookies">
            <summary>
            Cookie container used to store server cookies
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.#ctor(System.Boolean)">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.SendGetRequestAsync(System.Uri)">
            <summary>
            Send an request an an asynchronous operation
            </summary>
            <param name="uri">The Uri the request is sent to</param>
            <returns>The task object representing the asynchronous operation</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.SendGetRequest(System.Uri,RafaelEstevam.Simple.Spider.FetchComplete)">
            <summary>
            Send a request
            </summary>
            <param name="uri">The Uri the request is sent to</param>
            <param name="completeCallback">A callback for completion event</param>
            <returns>True if request success, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.SendPostRequestAsync(System.Uri,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Send a form data as an asynchronous operation
            </summary>
            <param name="uri">The Uri the request is sent to</param>
            <param name="FormData">The content the request sends</param>
            <returns>The task object representing the asynchronous operation</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.SendPostRequestAsync(System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Send a request as an asynchronous operation
            </summary>
            <param name="uri">The Uri the request is sent to</param>
            <param name="postData">The content the request sends</param>
            <returns>The task object representing the asynchronous operation</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.SendPostRequest(System.Uri,System.String,System.String)">
            <summary>
            Send a request
            </summary>
            <param name="uri">The Uri the request is sent to</param>
            <param name="stringData">The content the request sends</param>
            <param name="ContentType">The content type of the request</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.SendRequest(System.Uri,System.Net.Http.HttpMethod,System.Net.Http.HttpContent,RafaelEstevam.Simple.Spider.FetchComplete)">
            <summary>
            Sends a request
            </summary>
            <param name="uri">The Uri the request is sent to</param>
            <param name="method">The HTTP method</param>
            <param name="content">The contents of HTTP message</param>
            <param name="completeCallback">A callback for completion event</param>
            <returns>True if request success, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.SendFormData(System.Uri,System.Collections.Specialized.NameValueCollection,RafaelEstevam.Simple.Spider.FetchComplete)">
            <summary>
            Sends a Post request with a form content
            </summary>
            <param name="uri">The Uri the request is sent to</param>
            <param name="formFields">Form data to be sent</param>
            <param name="completeCallback">A callback for completion event</param>
            <returns>True if request success, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.CreateFormContent(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
            Creates a FormContent from data
            </summary>
            <param name="formData">Form data to be encoded</param>
            <returns>A FormUrlEncodedContent object</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.RequestHelper.CreateFormContent(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a FormContent from data
            </summary>
            <param name="formData">Form data to be encoded</param>
            <returns>A FormUrlEncodedContent object</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.UriHelper">
            <summary>
            Helper for Uri stuff
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.Combine(System.Uri,System.String,System.Boolean)">
            <summary>
            Combines a Uri with a Relative Url into a new combined Uri
            </summary>
            <param name="parent">Base Uri</param>
            <param name="relative">Relative Url</param>
            <param name="RemoveWhitespace">Indicates whenever it should remove all whitespaces from Url before combining</param>
            <returns>New combined Uri</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.HasFragment(System.Uri)">
            <summary>
            Returns if uri has a Fragment
            </summary>
            <param name="uri">Uri to check</param>
            <returns>Returns true if it has a fragment, else otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.HasQuery(System.Uri)">
            <summary>
            Returns if uri has a Query
            </summary>
            <param name="uri">Uri to check</param>
            <returns>Returns true if it has a query, else otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.RemoveFragment(System.Uri)">
            <summary>
            Removes the fragment from a Uri
            </summary>
            <param name="uri">Uri to remove from</param>
            <returns>A new Uri without the fragment</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.RemoveQuery(System.Uri)">
            <summary>
            Removes the query from a Uri
            </summary>
            <param name="uri">Uri to remove from</param>
            <returns>A new Uri without the query</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.RemoveQueryAndFragment(System.Uri)">
            <summary>
            Removes the query and/or the fragment from a Uri
            </summary>
            <param name="uri">Uri to remove from</param>
            <returns>A new Uri without the query and fragment</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.UrlWithoutHost(System.Uri)">
            <summary>
            Returns Url without the host part
            </summary>
            <param name="uri">Uri to return from</param>
            <returns>Returns the Url</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.GetQueryInfo(System.Uri)">
            <summary>
            Returns Uri.Query items as a NameValueCollection
            </summary>
            <param name="uri">Uri containing the query string to parse</param>
            <returns>A System.Collections.Specialized.NameValueCollection of query parameters and values</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.UriHelper.RemoveWhitespaceChars(System.String)">
            <summary>
            Remove whitespace from string <a href="https://stackoverflow.com/questions/6219454/efficient-way-to-remove-all-whitespace-from-string/30732794#30732794"/>
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.XElementHelper">
            <summary>
            Helper to do stuff with pages parsed as XElement 
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XElementHelper.GetTables(System.Xml.Linq.XElement)">
            <summary>
            Enumerates all XElements named 'table'
            </summary>
            <param name="Root">Root element to be enumerated</param>
            <returns>Enumeration of XElement tables</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XElementHelper.GetAllTables(System.Xml.Linq.XElement)">
            <summary>
            Enumerates all XElements named 'table' as DataTable collection
            </summary>
            <param name="Root">Root element to be enumerated</param>
            <returns>Enumeration of DataTable tables</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XElementHelper.GetTable(System.Xml.Linq.XElement)">
            <summary>
            Converts a XElement table to a DataTable
            </summary>
            <param name="table">Table element to be converted</param>
            <returns>DataTable converted</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XElementHelper.GetChilds(System.Xml.Linq.XElement,System.String)">
            <summary>
            Enumerates all nodes with Name.LocalName equals to Name
            </summary>
            <param name="Root">Root object to start searching</param>
            <param name="Name">Name to be searched</param>
            <returns>Enumeration of XElements named Name</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XElementHelper.GetChilds(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Enumerates all nodes with any Name.LocalName equals to Names
            </summary>
            <param name="Root">Root object to start searching</param>
            <param name="Names">Names to be searched</param>
            <returns>Enumeration of XElements named any of Names</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Helper.XmlSerializerHelper">
            <summary>
            Helper class to serialize and deserialize stuff using XML
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XmlSerializerHelper.SerializeToFile``1(``0,System.String)">
            <summary>
            Serialize a generic {T} object to a file
            </summary>
            <typeparam name="T">Type of the objects to be serialized</typeparam>
            <param name="obj">Object to be serialized</param>
            <param name="file">File path of the file</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XmlSerializerHelper.Serialize``1(``0,System.IO.TextWriter)">
            <summary>
            Serialize a generic {T} object to a stream
            </summary>
            <typeparam name="T">Type of the objects to be serialized</typeparam>
            <param name="obj">Object to be serialized</param>
            <param name="stream">Stream to save object to</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XmlSerializerHelper.Serialize``1(``0)">
            <summary>
            Serialize a generic {T} object to a string
            </summary>
            <typeparam name="T">Type of the objects to be serialized</typeparam>
            <param name="obj">Object to be serialized</param>
            <returns>String containing the object</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XmlSerializerHelper.DeserializeFromFile``1(System.String)">
            <summary>
            Deserialize a generic {T} object from a file
            </summary>
            <typeparam name="T">Type of the objects to be deserialized</typeparam>
            <param name="file">File path of the file</param>
            <returns>An instance of {T} with data from the file</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Helper.XmlSerializerHelper.Deserialize``1(System.IO.TextReader)">
            <summary>
            Deserialize a generic {T} object from a stream
            </summary>
            <typeparam name="T">Type of the objects to be deserialized</typeparam>
            <param name="reader">Stream to load object from</param>
            <returns>An instance of {T} with data from the stream</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.InitializationParams">
            <summary>
            Defines Initialization Parameters to a SimpleSpider instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.#ctor">
            <summary>
            Creates a new InitializationParams
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.InitializationParams.Cacher">
            <summary>
            Gets or sets the cacher to be used by the spider
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.InitializationParams.Downloader">
            <summary>
            Gets or sets the downloader to be used by the spider
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.InitializationParams.Parsers">
            <summary>
            Gets the list of parsers the spider should be initialized with
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.InitializationParams.StorageEngine">
            <summary>
            Gets or sets the storage engine to be used by the spider
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.InitializationParams.SpiderDirectory">
            <summary>
            Gets or sets the working SpiderDirectory to be used by the spider
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.InitializationParams.ConfigurationPrototype">
            <summary>
             Gets or sets a Configuration prototype to be used by the spider
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetSpiderStartupPath(System.String)">
            <summary>
            Instructs spider to use this path
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetSpiderStartupDirectory(System.IO.DirectoryInfo)">
            <summary>
            Instructs spider to use this directory
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetCacher(RafaelEstevam.Simple.Spider.Interfaces.ICacher)">
            <summary>
            Instructs spider to use this specific Cacher
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetDownloader(RafaelEstevam.Simple.Spider.Interfaces.IDownloader)">
            <summary>
            Instructs spider to use this specific Downloader
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetOfflineMode">
            <summary>
            Instructs spider to OfflineMode, set the Downloader to a NullDownloader instance on 'Ignore Mode'
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.AddParser``1(RafaelEstevam.Simple.Spider.Interfaces.IParser{``0})">
            <summary>
            Adds a Parser to the spider. Parsers can be added and removed on-the-fly
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetStorage(RafaelEstevam.Simple.Spider.Interfaces.IStorage)">
            <summary>
            Instructs spider to use this specific Storage Engine
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetLogger(Serilog.ILogger)">
            <summary>
            Sets a logger to be used by the spider instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.SetConfig(System.Action{RafaelEstevam.Simple.Spider.Configuration})">
            <summary>
            Allows to a chainable Action to set some configurations
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.Default000(System.Int32)">
            <summary>
            Frozen in time default: Minimal features, nothing enabled
            </summary>
            <param name="DownloadDelay">Config.DownloadDelay in milliseconds</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.Default001(System.Int32)">
            <summary>
            Frozen in time default: ContentCacher, WebClientDownloader, NoLimitCaching, and AutoAnchorsLinks enabled
            </summary>
            <param name="DownloadDelay">Config.DownloadDelay in milliseconds</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.InitializationParams.Default002(System.Int32)">
            <summary>
            Frozen in time default: ContentCacher, HttpClientDownloader with headers, NoLimitCaching, AutoAnchorsLinks enabled, and rewrites fragments
            </summary>
            <param name="DownloadDelay">Config.DownloadDelay in milliseconds</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.ICacher">
            <summary>
            Represents a module to fetch resources from the disk/memory
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Interfaces.ICacher.ShouldUseCache">
            <summary>
            Occurs before fetch to check if the cache can be used
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.ICacher.HasCache(RafaelEstevam.Simple.Spider.Link)">
            <summary>
            Returns if this module has a cache for this resource
            </summary>
            <param name="link">Resource the be checked for</param>
            <returns>True if has a cache for the resource</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.ICacher.GenerateCacheFor(RafaelEstevam.Simple.Spider.FetchCompleteEventArgs)">
            <summary>
            Create cache for this fetched resource
            </summary>
            <param name="FetchComplete">The fetched resource to create a cache for</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.IDownloader">
            <summary>
            Represents a module to fetch resources from the internet
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.IFetcher">
            <summary>
            Represents a module that Fetch some resource
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Interfaces.IFetcher.FetchCompleted">
            <summary>
            Occurs when a fetch complete
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Interfaces.IFetcher.FetchFailed">
            <summary>
            Occurs when a fetch fail
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Interfaces.IFetcher.ShouldFetch">
            <summary>
             Occurs before fetch to check if a fetch can occur
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IFetcher.Initialize(System.Collections.Concurrent.ConcurrentQueue{RafaelEstevam.Simple.Spider.Link},RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Pass spider data to initialize the module
            </summary>
            <param name="WorkQueue">The queue this module will use to fetch data from</param>
            <param name="Config">Current configuration</param>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Interfaces.IFetcher.IsProcessing">
            <summary>
            The module is busy processing some resource
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IFetcher.Start">
            <summary>
            Starts the module
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IFetcher.Stop">
            <summary>
            Stops the module
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.ParseData`1">
            <summary>
            Represents a method that passes parsed data
            </summary>
            <typeparam name="T">Type of data to be parsed</typeparam>
            <param name="sender">The source of the event</param>
            <param name="parserEventArgs">Object containing parsed data</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.IParserBase">
            <summary>
            Base Interface to construct IParser`T` from
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Interfaces.IParserBase.MimeTypes">
            <summary>
            A list of MimeTypes/Content-type this parser can process
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IParserBase.Parse(RafaelEstevam.Simple.Spider.SimpleSpider,RafaelEstevam.Simple.Spider.FetchCompleteEventArgs)">
            <summary>
            Method to initiate the parsing process
            </summary>
            <param name="spider">Spider object</param>
            <param name="fetchInfo">Fetched data to parse from</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.IParser`1">
            <summary>
            Interface to create custom parsers from
            </summary>
            <typeparam name="T">The type of the data processed</typeparam>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Interfaces.IParser`1.ParsedData">
            <summary>
            Event to propagate parsed data
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.ParserEventArgs`1">
            <summary>
            Arguments to the Parser Event
            </summary>
            <typeparam name="T">The type of the event data generated by the event</typeparam>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.ParserEventArgs`1.#ctor(RafaelEstevam.Simple.Spider.FetchCompleteEventArgs,`0)">
            <summary>
            Constructs a new ParserEventArgs
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Interfaces.ParserEventArgs`1.FetchInfo">
            <summary>
            Original FetchCompleteEventArgs received by the parser
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Interfaces.ParserEventArgs`1.ParsedData">
            <summary>
            Data parsed by the parser
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Interfaces.IStorage">
            <summary>
            Represents a Interface to store collected data
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IStorage.Initialize(RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Initialize the Storage with spider config
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IStorage.LoadData">
            <summary>
            Instructs the storage to load saved data (optional)
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IStorage.SaveData(System.Boolean)">
            <summary>
            Instructs the storage to save data
            </summary>
            <param name="IsAutoSave">Indicates if was initiated by the auto-save. If false the spider finished its queue</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IStorage.AddItem(RafaelEstevam.Simple.Spider.Link,System.Object)">
            <summary>
            Adds an item to the collection
            </summary>
            <param name="link">Link where the object was found</param>
            <param name="item">Item to be collected</param>
            <returns>Returns true if the item was added to the collection</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IStorage.Count">
            <summary>
            Counts the number of items collected
            </summary>
            <returns>Returns the number of items collected</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Interfaces.IStorage.RetrieveAllItems">
            <summary>
            Retrieve all stored items
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Link">
            <summary>
            Represents a Link enqueued or fetched
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.Uri">
            <summary>
            Primary Uri, the resource to be fetched
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.SourceUri">
            <summary>
            Uri where the Uri property was found
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.MovedUri">
            <summary>
            When redirected, the old Uri will be stored here
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.RewrittenUri">
            <summary>
            When rewritten, the old Uri will be stored here
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.FetchStart">
            <summary>
            Fetch start Datetime
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.FetchEnd">
            <summary>
            Fetch finish Datetime
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.FetchTime">
            <summary>
            Fetch duration
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Link.FetchCompleteCallBack">
            <summary>
            Specify and additional CallBack for this resource. Can not be saved/Loaded
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.#ctor(System.Uri,System.Uri)">
            <summary>
            Constructs a new Link
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.ToString">
            <summary>
            Returns the string representation of the Uri property
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.ResourceMoved(System.Uri)">
            <summary>
            Change the properties to reflect a moved resource
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.ResourceRewritten(System.Uri)">
            <summary>
            Change the properties to reflect a rewritten resource
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.op_Implicit(RafaelEstevam.Simple.Spider.Link)~System.Uri">
            <summary>
            Implicit conversion from Link to Uri, returns Uri property
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.op_Implicit(RafaelEstevam.Simple.Spider.Link)~System.String">
            <summary>
            Implicit conversion from Link to Url, returns Uri property
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.SaveLink(RafaelEstevam.Simple.Spider.Link)">
            <summary>
            Saves a link in a line-based http-like format
            </summary>
            <param name="link">Link to be saved</param>
            <returns>Lines</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.LoadLink(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads a link from a line-based http-like format
            </summary>
            <param name="content">Lines to be saved</param>
            <returns>Link</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.Equals(System.Object)">
            <summary>
            Checks if two objects are equal
            </summary>
            <param name="obj">Second object to check</param>
            <returns>True if equals, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.Equals(System.Uri)">
            <summary>
            Checks a Uri is equal to this Link, only Uri property is checked
            </summary>
            <param name="other">Second object to check</param>
            <returns>True if equals, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.Equals(RafaelEstevam.Simple.Spider.Link)">
            <summary>
            Checks if two objects are equal
            </summary>
            <param name="other">Second object to check</param>
            <returns>True if equals, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.Equals(System.String)">
            <summary>
            Checks if two objects are equal
            </summary>
            <param name="other">Second object to check</param>
            <returns>True if equals, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.Contains(System.String)">
            <summary>
            Check if current Uri contains a specified string
            </summary>
            <param name="PartialUrl">String to be searched</param>
            <returns>True if contains, false otherwise</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Link.GetHashCode">
            <summary>
            Serves as the default hash function 
            </summary>
            <returns>A hash code for the current object</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Parsers.HObjectParser">
            <summary>
            Html to HObject parser
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Parsers.HObjectParser.MimeTypes">
            <summary>
            MimeTypes supported by this parser
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Parsers.HObjectParser.ParsedData">
            <summary>
            Event with the html parsed as HObject
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Parsers.JsonDeserializeParser`1">
            <summary>
            Json parser to deserialize given T class
            </summary>
            <typeparam name="T">Type to be deserialized to</typeparam>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Parsers.JsonDeserializeParser`1.#ctor">
            <summary>
            Empty/Default constructor
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Parsers.JsonDeserializeParser`1.#ctor(RafaelEstevam.Simple.Spider.Interfaces.ParseData{`0})">
            <summary>
            Constructor with pre-defined callback. Easy to create and add reference in one line
            </summary>
            <param name="callback">Callback to be fired when this parser complete</param>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Parsers.JsonDeserializeParser`1.MimeTypes">
            <summary>
            Mime types supported by this parser
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Parsers.JsonDeserializeParser`1.ParsedData">
            <summary>
            Event with parsed data
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Parsers.JsonParser">
            <summary>
             Generic Json parser, return Newtonsoft's JObject
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Parsers.JsonParser.MimeTypes">
            <summary>
            Mime types supported by this parser
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Parsers.JsonParser.ParsedData">
            <summary>
            Event with parsed data
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Parsers.XmlXElementParser">
            <summary>
            Generic Xml to XElement parser
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Parsers.XmlXElementParser.Encoding">
            <summary>
            Encoding to be used by the parser
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Parsers.XmlXElementParser.MimeTypes">
            <summary>
            Mime types supported by this parser
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.Parsers.XmlXElementParser.ParsedData">
            <summary>
            Event with parsed data
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.SimpleSpider">
            <summary>
            Simple spider class
            </summary>
            <example>
            <code>
            var spider = new SimpleSpider("BooksToScrape", new Uri("http://books.toscrape.com/"));
            spider.FetchCompleted += fetchCompleted_items;
            spider.Execute();
            </code>
            </example>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.SimpleSpider.FetchCompleted">
            <summary>
            Resource fetched completed
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.SimpleSpider.FetchFailed">
            <summary>
            Resource fetched failed
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.SimpleSpider.ShouldFetch">
            <summary>
            Check if some resource should be fetched
            Used to block list urls
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.SimpleSpider.FetchRewrite">
            <summary>
            Allow change the Uri just before it is added to the queue
            </summary>
        </member>
        <member name="E:RafaelEstevam.Simple.Spider.SimpleSpider.ShouldUseCache">
            <summary>
            Check if some cached resource should be renewed
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.Configuration">
            <summary>
            Spider configurations and parameters
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.SpiderName">
            <summary>
            Name of the spider
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.BaseUri">
            <summary>
            Base Uri to fetch, resources outside this host will not be fetched
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.Cacher">
            <summary>
            Current Cacher
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.Downloader">
            <summary>
            Current Downloader
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.Parsers">
            <summary>
            Current Parsers
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.Storage">
            <summary>
            Current storage engine
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.SpiderWorkData">
            <summary>
            Spider private work data, mess with care
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.#ctor(System.String,System.Uri,RafaelEstevam.Simple.Spider.InitializationParams)">
            <summary>
            Create a new spider to fetch data from some website
            See use examples on the Github page
            </summary>
            <param name="spiderName">A unique name for this spider. Folder will be created with that name</param>
            <param name="baseUri">The base Uri of the website. Pages outside this Host will not be fetched</param>
            <param name="params">Additional initialization parameters</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.Execute">
            <summary>
            Main execution loop, returns once finished
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.Execute(System.Threading.CancellationToken)">
            <summary>
            Main execution loop, returns once finished or cancelled
            </summary>
            <param name="cancellationToken">Cancellation token to prematurely stop</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.AddPages(System.Collections.Generic.IEnumerable{System.Uri},System.Uri)">
            <summary>
            Add page to fetch
            </summary>
            <param name="PagesToVisit">Uris to fetch</param>
            <param name="SourcePage">Uri where all the PagesToVisit was found</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.AddPage(System.Uri,System.Uri)">
            <summary>
            Add page to fetch
            </summary>
            <param name="PageToVisit">Uri to fetch</param>
            <param name="SourcePage">Uri where the PageToVisit was found</param>
            <returns>Link object</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.QueueFinished">
            <summary>
            All queues finished ?
            </summary>
            <returns>Whenever the queues finished</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.QueueSize">
            <summary>
            Current queues size
            </summary>
            <returns>Returns the size of the queue</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.AllCompletedLinks">
            <summary>
            Returns an array with links of all completed fetchs
            </summary>
            <returns>An array of Links</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.HowToUse_PrintToConsole">
            <summary>
            Prints use instructions on console 
            See more on the GitHub project page: https://github.com/RafaelEstevamReis/SimpleSpider
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.SimpleSpider.SpiderData">
            <summary>
            Internal spider data storage
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.SimpleSpider.SpiderData.#ctor">
            <summary>
            Constructor of the class
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.SpiderData.Error404">
            <summary>
            List of pages that once got a 404 error and should not be downloaded again
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.SpiderData.Moved301">
            <summary>
            List of pages that once got redirected to be changed automatically
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.SimpleSpider.SpiderData._Redirect301">
            <summary>
            DO NOT USE - Serializable version of internal dictionary
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage">
            <summary>
            JsonLines-based storage engine
            <a href="https://jsonlines.org/">See more</a>
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage.Initialize(RafaelEstevam.Simple.Spider.Configuration)">
            <summary>
            Initializes the storage
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage.AddItem(RafaelEstevam.Simple.Spider.Link,System.Object)">
            <summary>
            Adds a new item
            </summary>
            <param name="link">Link where the object was found</param>
            <param name="item">Item to be collected</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage.Count">
            <summary>
            Not supported by this Storage
            </summary>
            <returns>Returns -1</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage.LoadData">
            <summary>
            Not supported by this storage, does nothing
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage.SaveData(System.Boolean)">
            <summary>
            Saves all data
            </summary>
            <param name="IsAutoSave">Indicates if is an Auto-save or if is closing. Call with True will dispose the stream</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage.RetrieveAllItems">
            <summary>
            Retieve all items
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Storage.JsonLinesStorage.RetrieveAllItems``1">
            <summary>
            Retieve all items
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HObject">
            <summary>
            Represents a Html Tags Collection
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType">
            <summary>
            Types of items to search
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType.AnyElement">
            <summary>
            Search for Tag Name
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType.ChildElement">
            <summary>
            Search for Tag Name only on child elements
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType.AnyIdEquals">
            <summary>
            Search for ID attribute
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType.AnyClassContaining">
            <summary>
            Search for Class attribute
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType.FilterId">
            <summary>
            Filter current by ID, similar to this.OfID(Name)
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType.FilterClass">
            <summary>
            Filter current by Class, similar to this.OfClass(Name)
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.IsEmpty">
            <summary>
            Checks if the filtering results in an empty object
            </summary>
            <returns>True if there are no elements left</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.HasAttribute(System.String)">
            <summary>
            Checks if the first element has the specified attribute
            </summary>
            <param name="AttributeName">Name of the attribute</param>
            <returns>True if the first element has the Attribute</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance of the HObject class
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance of the HObject class
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.#ctor(System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlNode})">
            <summary>
            Initializes a new instance of the HObject class
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HObject.Item(RafaelEstevam.Simple.Spider.Wrappers.HObject.SearchType,System.String)">
            <summary>
            Gets a HObject with specified Name matching Type
            </summary>
            <param name="Name">Name of the element to search for</param>
            <param name="Type">Type of search</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HObject.Item(System.String)">
            <summary>
            Gets a HObject with specified Tag. Supports css notation of '#' for ID and '.' for classes
            </summary>
            <param name="SearchName">Name of the Tag to search for or the '#{IdName}' or the '.{ClassName}'</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HObject.Item(System.String[])">
            <summary>
            Gets a HObject searched in chain with an array of Names. Supports css notation of '#' for ID and '.' for classes
            </summary>
            <param name="SearchNames">Array of names of the Tag to search for or the '#{IdName}' or the '.{ClassName}'</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HObject.Item(System.Int32)">
            <summary>
            Gets the n-th HObject
            </summary>
            <param name="Position">Index of the HObject to be returned</param>
            <returns>HObject at specified position</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.Tags(System.String)">
            <summary>
            Returns all Tags named TagName
            </summary>
            <param name="TagName">The name of the tag</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.Children(System.String)">
            <summary>
            Returns all children tags named TagName
            </summary>
            <param name="TagName">The name of the tag</param>
            <returns>A HObject filtered</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.IDs(System.String)">
            <summary>
            Returns all Tags with ID equals to specified parameter
            </summary>
            <param name="IDsEquals">Id value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.OfID(System.String)">
            <summary>
            Filters current tags selecting only the ones with specified Id value
            </summary>
            <param name="IDsEquals">Id value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.Classes(System.String)">
            <summary>
            Returns all Tags with Class containing specified parameter
            Note: In HTML classes are an array of strings
            </summary>
            <param name="ClassName">The class name to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.OfClass(System.String)">
            <summary>
            Filters current tags selecting only the ones with specified Class value
            Note: In HTML classes are an array of strings
            </summary>
            <param name="ClassName">The class name to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.Having(System.String,System.String)">
            <summary>
            Returns all Tags with Named Attribute equals to specified parameter. Search in all descendants
            </summary>
            <param name="AttributeName">Name of the attribute</param>
            <param name="AttributeValue">Value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.OfWhich(System.String,System.String)">
            <summary>
            Filters current tags selecting only the ones with Named Attribute equals to specified parameter. Search only in root elements
            </summary>
            <param name="AttributeName">Name of the attribute</param>
            <param name="AttributeValue">Value to search for</param>
            <returns>A HObject</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.CssSelect(System.String)">
            <summary>
            Executes a CSS Select query with '&gt;' separator, '.Class' and '#Id'
            </summary>
            <param name="Query">CSS Query string</param>
            <returns>HObject selected</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.XPathSelect(System.String)">
            <summary>
            Executes a XPath Select query in each element and returns all results
            </summary>
            <param name="Query">XPath Query string</param>
            <returns>HObject elements with all results</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetNode">
            <summary>
            Returns all Nodes of the collection
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetNodes">
            <summary>
            Returns all Nodes of the collection
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetValue">
            <summary>
            Returns first element Value
            </summary>
            <returns>The string Value of the element</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.Trim">
            <summary>
            Returns first element Value trimmed
            </summary>
            <returns>The trimmed string Value of the element</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetValues">
            <summary>
            Returns an array with all Elements values
            </summary>
            <returns>String array of the values</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.TrimAll">
            <summary>
            Returns an array with all Elements values trimmed
            </summary>
            <returns>String array of the values trimmed</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetAttributeValue(System.String)">
            <summary>
            Gets the value of attribute named AttributeName of the first item
            </summary>
            <param name="AttributeName">Name of the attribute</param>
            <returns>Value of the attribute</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetAttributeValues(System.String)">
            <summary>
            Gets all the values of the attribute named AttributeName of all items
            </summary>
            <param name="AttributeName">Name of the attribute</param>
            <returns>String array of Values</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetHrefValue">
            <summary>
            Gets the value of attribute 'href' of the first item
            </summary>
            <returns>String containing the value</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetHrefValues">
            <summary>
            Gets all the values of the attribute 'href' of all items
            </summary>
            <returns>String array with values</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetClassValue">
            <summary>
            Gets the value of the Class attribute of the first item
            </summary>
            <returns>String containing the Class</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetIdValue">
            <summary>
            Gets the value of the Id attribute of the first item
            </summary>
            <returns>String containing the Id</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetIdsValues">
            <summary>
            Gets the value of all the Id attribute of all items
            </summary>
            <returns>String array containing all the Ids</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetNameValue">
            <summary>
            Gets the value of the Name attribute of the first item
            </summary>
            <returns>String containing the Name</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetNameValues">
            <summary>
            Gets the value of all the Name attribute of all items
            </summary>
            <returns>String array containing all the Names</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetStyleValue">
            <summary>
            Gets the value of the Style attribute of the first item
            </summary>
            <returns>String containing the Style</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the HObject collection.
            </summary>
            <returns>An HObject enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.op_Implicit(RafaelEstevam.Simple.Spider.Wrappers.HObject)~HtmlAgilityPack.HtmlNode">
            <summary>
            Returns first node of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.op_Implicit(RafaelEstevam.Simple.Spider.Wrappers.HObject)~HtmlAgilityPack.HtmlNode[]">
            <summary>
            Returns all Nodes of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.op_Implicit(RafaelEstevam.Simple.Spider.Wrappers.HObject)~System.String">
            <summary>
            Returns the Value of the first element of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HObject.op_Implicit(RafaelEstevam.Simple.Spider.Wrappers.HObject)~System.String[]">
            <summary>
            Returns the Values of all elements of the collection
            </summary>
            <param name="h">A HObject to be converted</param>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor">
            <summary>
            Represents an html Anchor tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor.Href">
            <summary>
            Gets the Href attribute of the tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor.GetUri(System.Uri)">
            <summary>
            Combines ParentUri with Href and returns a clean Uri
            </summary>
            <param name="ParentUri">Parent Uri to combine to</param>
            <returns>An Uri combined without whitespaces</returns>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor.Target">
            <summary>
            Gets the Target attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.AnchorExtensions">
            <summary>
            Exposes extensions methods for Anchor
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.AnchorExtensions.AddPage(RafaelEstevam.Simple.Spider.SimpleSpider,RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor,System.Uri)">
            <summary>
            Add an Anchor to fetch
            </summary>
            <param name="spider">Spider to add</param>
            <param name="anchor">Anchor to fetch</param>
            <param name="SourcePage">Uri where the Anchor was found</param>
            <returns>Link object</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.AnchorExtensions.AddPages(RafaelEstevam.Simple.Spider.SimpleSpider,System.Collections.Generic.IEnumerable{RafaelEstevam.Simple.Spider.Wrappers.HTML.Anchor},System.Uri)">
            <summary>
            Adds an Anchors to fetch
            </summary>
            <param name="spider">Spider to add</param>
            <param name="anchors">Anchors to fetch</param>
            <param name="SourcePage">Uri where the Anchor was found</param>
            <returns>Array of Links</returns>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Article">
            <summary>
            Represents an html Article tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Article.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Article.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Button">
            <summary>
            Represents an html Button tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Button.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Button.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Button.Name">
            <summary>
            Gets the Name attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Button.Type">
            <summary>
            Gets the Type attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Button.Value">
            <summary>
            Gets the Value attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Button.Disabled">
            <summary>
            Gets the Disabled attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Data">
            <summary>
            Represents an html Data tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Data.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Data.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Data.Value">
            <summary>
            Gets the Value attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Div">
            <summary>
            Represents an html Div tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Div.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Div.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form">
            <summary>
            Represents an html Tag tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.Action">
            <summary>
            Gets the Action attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.Method">
            <summary>
            Gets the Method attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.Name">
            <summary>
            Gets the Name attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.Target">
            <summary>
            Gets the Target attribute of the tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.GetInputs">
            <summary>
            Gets all children input tags
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.GetSelects">
            <summary>
            Gets all children select tags
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Form.GetFormData">
            <summary>
            Get all form inputs' Name and Value attributes. 
            NameValueCollection does not support multiple values with the same key
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.IFrame">
            <summary>
            Represents an html IFrame tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.IFrame.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.IFrame.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.IFrame.Name">
            <summary>
            Gets the Name attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.IFrame.Src">
            <summary>
            Gets the Src attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.IFrame.Height">
            <summary>
            Gets the Height attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.IFrame.Width">
            <summary>
            Gets the Width attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Img">
            <summary>
            Represents an html Image tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Img.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Img.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Img.Src">
            <summary>
            Gets the Src attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Img.Alt">
            <summary>
            Gets the Alt attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Img.Height">
            <summary>
            Gets the Height attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Img.Width">
            <summary>
            Gets the Width attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input">
            <summary>
            Represents an html Input tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.Name">
            <summary>
            Gets the Name attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.Src">
            <summary>
            Gets the Src attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.Type">
            <summary>
            Gets the Type attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.Value">
            <summary>
            Gets the Value attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.Checked">
            <summary>
            Gets the Checked attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Input.Disabled">
            <summary>
            Gets the Disabled attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Label">
            <summary>
            Represents an html Label tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Label.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Label.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Label.For">
            <summary>
            Gets the for attribute of the tag as Text
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Label.ForElement">
            <summary>
            Gets the element indicated in the For attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Li">
            <summary>
            Represents an html List Item tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Li.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Li.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Link">
            <summary>
            Represents an html Link tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Link.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Link.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Link.Href">
            <summary>
            Gets the Href attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Link.Rel">
            <summary>
            Gets the Rel attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta">
            <summary>
            Represents an html Anchor tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta.Charset">
            <summary>
            Gets the Charset attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta.HttpEquiv">
            <summary>
            Gets the Http-Equiv attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta.Name">
            <summary>
            Gets the Name attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta.Content">
            <summary>
            Gets the Content attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Meta.ContentItems">
            <summary>
            Gets the Content attribute splitted on comma
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ol">
            <summary>
            Represents an html Ordered List tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ol.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ol.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ol.GetItems">
            <summary>
            Gets all children Li tags
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Option">
            <summary>
            Represents an html Option tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Option.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Option.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Option.Label">
            <summary>
            Gets the Label attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Option.Value">
            <summary>
            Gets the Value attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Option.Selected">
            <summary>
            Gets the Selected attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Option.Disabled">
            <summary>
            Gets the Disabled attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Paragraph">
            <summary>
            Represents an html Paragraph tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Paragraph.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Paragraph.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Param">
            <summary>
            Represents an html Param tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Param.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Param.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Param.Name">
            <summary>
            Gets the Name attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Param.Value">
            <summary>
            Gets the Value attribute of the tag
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Select">
            <summary>
            Represents an html Select tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Select.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Select.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Select.Name">
            <summary>
            Gets the Name attribute of the tag
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Select.Multiple">
            <summary>
            Gets the Multiple attribute of the tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Select.SelectedValue">
            <summary>
            Returns the 'Value' of the first Options with Selected attribute present
            </summary>
            <returns>The value of the option</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Select.GetItems">
            <summary>
            Gets all children Option tags
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Span">
            <summary>
            Represents an html Span tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Span.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Span.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag">
            <summary>
            Represents a HTML tag
            </summary>
        </member>
        <member name="F:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.MappingTable">
            <summary>
            Tag name/type mapping table
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Node">
            <summary>
            Exposes underlying HtmlNode
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance of the Tag class
            </summary>
            <param name="document">A HtmlDocument to initialize from</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance of the Tag class
            </summary>
            <param name="node">A HtmlNode to initialize from</param>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.TagName">
            <summary>
            Contains the name of the element
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.InnerText">
            <summary>
            Contains the Inner Text of the element
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Id">
            <summary>
            Contains the Id attribute of the element
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Class">
            <summary>
            Contains the Class attribute of the element
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Style">
            <summary>
            Contains the Style attribute of the element
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.ItemProp">
            <summary>
            Contains the Itemprop attribute of the element
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Classes">
            <summary>
            Gets an array of the Classes splitted by a space
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Attributes">
            <summary>
            Gets a TagAttribute with the attributes of the element
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Children">
            <summary>
            Gets element's children
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.SelectTag(System.String)">
            <summary>
            Selects an single element using XPath
            </summary>
            <param name="XPath">A string with the XPath query</param>
            <returns>A tag with selected element or null if none matched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.SelectTag``1(System.String)">
            <summary>
            Selects an single element using XPath
            </summary>
            <param name="XPath">A string with the XPath query</param>
            <typeparam name="T">Parameter type to be returned</typeparam>
            <returns>A tag with selected element or null if none matched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.SelectTag``1">
            <summary>
             Selects an single element by type
            </summary>
            <typeparam name="T">Parameter type to be selected and returned</typeparam>
            <returns>A tag with selected element or null if none matched</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.SelectTags(System.String)">
            <summary>
            Selects elements using XPath
            </summary>
            <param name="XPath">A string with the XPath query</param>
            <returns>An Tag collection with selected elements</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.SelectTags``1(System.String)">
            <summary>
            Selects elements using XPath
            </summary>
            <typeparam name="T">Parameter type to be returned</typeparam>
            <param name="XPath">A string with the XPath query</param>
            <returns>An Tag collection with selected converted elements</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.SelectTags``1">
            <summary>
            Selects elements by type
            </summary>
            <typeparam name="T">Parameter type to be selected and returned</typeparam>
            <returns>An Tag collection with selected converted elements</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.GetChildren">
            <summary>
            Enumerate all Children
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.GetChildren(System.String)">
            <summary>
            Enumerate all Children with specified TagName
            </summary>
            <param name="TagName">The name of the tags</param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.GetChildren``1">
            <summary>
            Returns all Children of specified {T} Tag
            </summary>
            <typeparam name="T">Parameter type to be returned</typeparam>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.Cast``1">
            <summary>
            Casts Tag to specific Html Tag type
            </summary>
            <typeparam name="T">Parameter type to be returned</typeparam>
            <returns>Tag object returned</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.ThrowsIfNotName(HtmlAgilityPack.HtmlDocument,System.String)">
            <summary>
            Throws an InvalidCastException if the current document node name is incorrect
            </summary>
            <param name="doc"></param>
            <param name="name"></param>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.ThrowsIfNotName(HtmlAgilityPack.HtmlNode,System.String)">
            <summary>
            Throws an InvalidCastException if the current node name is incorrect
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.op_Implicit(RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag)~RafaelEstevam.Simple.Spider.Wrappers.HObject">
            <summary>
            Implicitly converts between Tag and HObject
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag.op_Implicit(RafaelEstevam.Simple.Spider.Wrappers.HObject)~RafaelEstevam.Simple.Spider.Wrappers.HTML.Tag">
            <summary>
            Implicitly converts between Tag and HObject
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.TagAttributes">
            <summary>
            Represents an html tag attribute collection
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.TagAttributes.#ctor(HtmlAgilityPack.HtmlAttributeCollection)">
            <summary>
            Initializes a new empty instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.TagAttributes.Contains(System.String)">
            <summary>
            Checks for existence of attribute with given name
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.TagAttributes.Item(System.String)">
            <summary>
            Gets the value af the attribute named Value
            </summary>
            <param name="Name">Name of the attribute</param>
            <returns>String with the content of the attribute</returns>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.TagAttributes.GetEnumerator">
            <summary>
            Enumerates all attributes
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.TagAttributes.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator for the attributes
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.TagAttributes.ToString">
            <summary>
            Returns a string that represents the current object
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITag">
            <summary>
            Interface for Html Tag, define Global Attributes
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITag.TagName">
            <summary>
            Name attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITag.Id">
            <summary>
            Id attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITag.Class">
            <summary>
            Class attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITag.Style">
            <summary>
            Style attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITag.ItemProp">
            <summary>
            Itemprop attribute
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITag.Cast``1">
            <summary>
            Casts Tag to specific Html Tag type
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagValue">
            <summary>
            Represents tags with Value attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagValue.Value">
            <summary>
            Value attribute
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagType">
            <summary>
            Represents tags with Type attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagType.Type">
            <summary>
            Type attribute
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagSrc">
            <summary>
            Represents tags with Src attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagSrc.Src">
            <summary>
            Src attribute
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagName">
            <summary>
            Represents tags with Name attribute
            </summary>
        </member>
        <member name="P:RafaelEstevam.Simple.Spider.Wrappers.HTML.ITagName.Name">
            <summary>
            Name attribute
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.ILabelable">
            <summary>
            Represents tags associated with Label element
            </summary>
        </member>
        <member name="T:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ul">
            <summary>
            Represents an html Unordered List tag
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ul.#ctor(HtmlAgilityPack.HtmlDocument)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ul.#ctor(HtmlAgilityPack.HtmlNode)">
            <summary>
            Initializes a new instance
            </summary>
        </member>
        <member name="M:RafaelEstevam.Simple.Spider.Wrappers.HTML.Ul.GetItems">
            <summary>
            Gets all children Li tags
            </summary>
        </member>
    </members>
</doc>
